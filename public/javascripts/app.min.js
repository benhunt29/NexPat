var app=angular.module("NextPat",["ngRoute"]);app.config(["$routeProvider","$locationProvider",function(e,t){t.html5Mode(!0),e.when("/",{templateUrl:"/views/home.html",controller:"mainController"}).when("/about",{templateUrl:"/views/about.html",controller:"aboutController"}).when("/contact",{templateUrl:"/views/contact.html",controller:"contactController"}).when("/login",{templateUrl:"/views/login.html",controller:"loginController"}).when("/signUp",{templateUrl:"/views/signUp.html",controller:"loginController"}).when("/questionnaire",{templateUrl:"/views/questionnaire.html",controller:"questionnaireController"}).when("/help",{templateUrl:"/views/help.html",controller:"helpController"}).otherwise({redirectTo:"/"})}]),app.controller("mainController",["$scope","$location",function(e,t){var o=[{question:"Have you been here before?",route:"login"},{question:"Would you like to sign up?",route:"signUp"},{question:"Okay, your information will not be saved."}];e.question=o[0].question;var n=0;e.showButtons=!0,e.getQuestion=function(r){var l=(o[n].question,o[n].route);r?t.path(l):(n++,e.question=o[n].question,n==o.length-1&&(e.showButtons=!1))}}]),app.controller("aboutController",["$scope",function(e){e.message="I'm a page that describes this application!"}]),app.controller("contactController",["$scope",function(e){e.message="I'm a page that tells you how to yell (by writing an all-caps email) at the developer!"}]),app.controller("signUpController",["$scope","$http",function(e,t){}]),app.controller("loginController",["$scope","$http","authService","$location","$rootScope",function(e,t,o,n,r){e.submit=function(){t.post("api/login",e.form).then(function(e){o.saveToken(e.data),r.user=o.getUser(),n.path("/questionnaire")})}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location",function(e,t,o,n){o.user=e.getUser(),o.user&&o.user.username&&n.path("/questionnaire"),t.logout=function(){e.logout(),o.user=e.getUser(),n.path("/login")}}]),app.controller("helpController",["$scope",function(e){e.message="I'm a help page that currently doesn't help at all"}]),app.controller("questionnaireController",["$scope","$location",function(e,t){var o=[{question:"Are you interested in living abroad?",type:"boolean"},{question:"Do you speak any languages besides English?",type:"boolean"},{question:"What field do you work in?",type:"list",answerOptions:["Technology","Engineering","Finance","Law","Business"]}],n=1;e.type=o[0].type,e.question=o[0].question,e.getQuestion=function(t){n==o.length?(e.question="Your list is being generated!",e.type=""):(e.question=o[n].question,e.type=o[n].type,"list"==e.type&&(e.list=o[n].answerOptions),o[n-1].answer=t,n++)}}]),app.service("authService",["$window",function(e){this.parseJwt=function(t){if(t){var o=t.split(".")[1],n=o.replace("-","+").replace("_","/");return JSON.parse(e.atob(n))}return{}},this.saveToken=function(t){e.localStorage.jwtToken=t,console.log("Saved token:",e.localStorage.jwtToken)},this.getToken=function(){return e.localStorage.jwtToken},this.isAuthed=function(){var e=this.getToken();if(e){var t=this.parseJwt(e),o=Math.round((new Date).getTime()/1e3)<=t.exp;return o||this.logout(),o}return!1},this.logout=function(){delete e.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.factory("authInterceptor",["$q","$location","authService",function(e,t,o){return{request:function(e){return e.headers=e.headers||{},o.isAuthed()&&(e.headers.Authorization="Bearer "+o.getToken()),e},response:function(o){return 401===o.status&&t.path("/login"),o||e.when(o)},responseError:function(o){return 401===o.status?t.path("/login"):console.log(o),e.reject(o)}}}]);
//# sourceMappingURL=data:application/json;base64,