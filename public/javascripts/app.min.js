var app=angular.module("NextPat",["ngRoute","ngMaterial","ngMessages","validation.match"]);app.config(["$httpProvider","$routeProvider","$locationProvider","$mdThemingProvider",function(e,t,n,a){n.html5Mode(!0),e.defaults.useXDomain=!0,delete e.defaults.headers.common["X-Requested-With"],e.interceptors.push("authInterceptor"),a.theme("default").primaryPalette("blue-grey").accentPalette("grey").warnPalette("red").backgroundPalette("blue-grey"),t.when("/",{templateUrl:"/views/home.html",controller:"homeController"}).when("/about",{templateUrl:"/views/about.html",controller:"aboutController"}).when("/contact",{templateUrl:"/views/contact.html",controller:"contactController"}).when("/login",{templateUrl:"/views/login.html",controller:"loginController"}).when("/signUp",{templateUrl:"/views/signUp.html",controller:"signUpController"}).when("/questionnaire",{templateUrl:"/views/questionnaire.html",controller:"questionnaireController"}).when("/help",{templateUrl:"/views/help.html",controller:"helpController"}).when("/country",{templateUrl:"/views/country.html",controller:"countryController"}).otherwise({redirectTo:"/"})}]),app.controller("homeController",["authService","countryPage","questionnaire","userRecommendations","$http","$rootScope","$scope","$location",function(e,t,n,a,o,r,i,s){if(r.user=e.getUser(),r.user&&r.user.username)o.get("/api/questionnaire/"+r.user.username).then(function(e){"object"==typeof e.data?o.post("/api/worldFactbook",{languageOption:!0,language:e.data.question1}).then(function(t){i.recommendations=n.determineRecommendations(e.data,t.data),a.countries=i.recommendations}):s.path("/questionnaire")});else{var u=[{question:"Have you been here before?",route:"login"},{question:"Would you like to sign up?",route:"signUp"},{question:"Okay, you won't be able to do much..."}];i.question=u[0].question;var l=0;i.showButtons=!0,i.getQuestion=function(e){var t=(u[l].question,u[l].route);e?s.path(t):(l++,i.question=u[l].question,l==u.length-1&&(i.showButtons=!1))}}i.setCountryPage=function(e){t.name=e.countryName,t.abbreviation=e.abbreviation,t.largestCityName=e.largestCityName?e.largestCityName:"No Information",t.largestCityPop=e.largestCityPop?e.largestCityPop:"No Information",t.majorityLanguage=e.majorityLanguage,t.medianAge=e.medianAge,s.path("/country")}}]),app.controller("aboutController",["$scope",function(e){}]),app.controller("contactController",["$scope",function(e){}]),app.controller("signUpController",["$location","$scope","$http",function(e,t,n){t.register=function(){var a={username:t.form.userName,email:t.form.email,password:t.form.password,lastName:t.form.lastName,firstName:t.form.firstName,passwordConfirm:t.form.passwordConfirm};n.post("/api/register",a).then(function(t){e.path("/login")})}}]),app.controller("countryController",["sharedService","countryPage","$scope","$http",function(e,t,n,a){n.countryName=t.name,n.abbreviation=t.abbreviation,n.largestCityName=t.largestCityName,n.largestCityPop=t.largestCityPop,n.majorityLanguage=t.majorityLanguage,n.medianAge=t.medianAge,n.worldBankData={};var o=function(){a.get("/externalAPIs/worldBankData/"+n.abbreviation).then(function(e){n.worldBankData.column1=e.data.slice(0,e.data.length/2),n.worldBankData.column2=e.data.slice(e.data.length/2,e.data.length)},function(e){n.data="There was an error, try again later!"})};o();var r=encodeURI(n.countryName),i=function(){a.get("/externalAPIs/mediWiki/"+r).then(function(e){n.flagUrl=e.data},function(e){n.data="There was an error, try again later!"})};i()}]),app.controller("loginController",["$mdToast","$scope","$http","authService","$location","$rootScope",function(e,t,n,a,o,r){t.signIn=function(){var e={username:t.form.userName,password:t.form.password};n.post("api/login",e).then(function(e){a.saveToken(e.data),r.user=a.getUser(),o.path("/")},function(e){t.errorToast(e.data.error)})},t.errorToast=function(t){e.show(e.simple().content(t).hideDelay(3e3))}}]),app.controller("navCtrl",["userRecommendations","authService","$scope","$rootScope","$location","$http",function(e,t,n,a,o,r){a.user=t.getUser(),a.user&&a.user.username&&o.path("/"),n.logout=function(){r.get("/api/logout").then(function(e){}),t.logout(),a.user=t.getUser(),e={},o.path("/home")}}]),app.controller("helpController",["$scope",function(e){e.message="I'm a help page that currently doesn't help at all"}]),app.controller("questionnaireController",["countryPage","userRecommendations","questionnaire","$rootScope","$scope","$location","$http",function(e,t,n,a,o,r,i){function s(){return o.list.map(function(e){return{value:e.toLowerCase(),display:e}})}function u(e){var t=angular.lowercase(e);return function(e){return 0===e.value.indexOf(t)}}a.user.username||r.path("/");var l=n.questions,c={},p={};o.questionNum=0,o.data={},o.data={},o.answers=[],o.querySearch=function(e){return e?o.list.filter(u(e)):o.list},o.pushAnswer=function(e){e&&(o.answers.push(e),o.data.showAnswers=!0,o.searchText="")},a.user.username&&i.get("/api/questionnaire/"+a.user.username).then(function(e){"object"==typeof e.data?i.post("/api/worldFactbook",{languageOption:!0,language:e.data.question1}).then(function(a){o.recommendations=n.determineRecommendations(e.data,a.data),t.countries=o.recommendations}):(o.getQuestion(),o.list=s())}),o.getQuestion=function(){o.data.showAnswers=!1,o.questionNum==l.length?(o.question="Your list is being generated!",p.username=a.user.username,p.questionResponses=c,i.post("/api/questionnaire",p),i.post("/api/worldFactbook",{languageOption:!0,language:c.question1}).then(function(e){o.recommendations=n.determineRecommendations(c,e.data),t.countries=o.recommendations,r.path("/")}),o.type=""):(o.question=l[o.questionNum].question,o.type=l[o.questionNum].type,"list"==o.type&&(o.list=l[o.questionNum].answerOptions))},o.logAnswer=function(e){o.data.showAnswers=!1,o.questionNum++,e.constructor===Array&&(e=e.join(" ")),c["question"+o.questionNum]=e,o.answers=[],o.searchText=""},o.addCountry=function(){i.post("/api/userCountries",{username:a.user.username,userCountries:["france","germany","spain"]}).then(function(e){o.userCountries=e.userCountries})},o.deleteQuestionnaire=function(){i["delete"]("api/questionnaire/"+a.user.username).then(function(e){t={},o.recommendations=!1,o.questionNum=0,o.getQuestion(),o.list=s()})}}]),app.service("authService",["$window",function(e){this.parseJwt=function(t){if(t){var n=t.split(".")[1],a=n.replace("-","+").replace("_","/");return JSON.parse(e.atob(a))}return{}},this.saveToken=function(t){e.localStorage.jwtToken=t},this.getToken=function(){return e.localStorage.jwtToken},this.isAuthed=function(){var e=this.getToken();if(e){var t=this.parseJwt(e),n=Math.round((new Date).getTime()/1e3)<=t.exp;return n||this.logout(),n}return!1},this.logout=function(){delete e.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.factory("authInterceptor",["$q","$location","authService",function(e,t,n){return{request:function(e){return e.headers=e.headers||{},n.isAuthed()&&(e.headers.Authorization="Bearer "+n.getToken()),e},response:function(a){return t.search().access_token&&(n.saveToken(t.search().access_token),t.search("access_token",void 0),t.path("/")),401===a.status&&t.path("/login"),a||e.when(a)},responseError:function(n){return 401===n.status&&t.path("/login"),e.reject(n)}}}]),app.factory("questionnaire",function(){return{questions:[{question:"What language(s) do you speak?",type:"list",answerOptions:["Adyghe","Albanian","Aragonese","Armenian","Aromanian","Arpitan","Asturian","Avar","Azerbaijani","Bashkir","Basque","Belarusian","Bosnian","Breton","Bulgarian","Catalan","Chechen","Chuvash","Cornish","Corsican","Crimean","Croatian","Czech","Danish","Dutch","English","Erzya","Estonian","Faroese","Finnish","French","Frisian","Gagauz","Galician","Gallo","Georgian","German","Greek","Hungarian","Icelandic","Ingrian","Irish","Italian","Kabardian","Kashubian","Kazakh","Ladin","Latin","Latvian","Laz","Lithuanian","Luxembourgish","Macedonian","Maltese","Manx","Mari","Mingrelian","Mirandese","Montenegrin","Norwegian","Occitan","Ossetian","Picard","Polish","Portuguese","Romani","Romanian","Romansh","Russian","Sami","Sardinian","Scots","Scottish","Gaelic","Serbian","Silesian","Slovak","Slovene","Sorbian","Spanish","Svan","Swedish","Tabasaran","Tatar","Turkish","Ukrainian","Vepsian","VÃµro","Walloon","Welsh","Wymysorys"]},{question:"What field do you work in?",type:"list",answerOptions:["Agriculture","Industry","Services"]},{question:"What climate(s) would you prefer?",type:"list",answerOptions:["Temperate","Mediterranean","Tropical","Arid","Desert","Maritime","Wet"]},{question:"What is the ideal size for the largest metropolitan area?",type:"list",answerOptions:["Small (<100,000)","Medium (100,000-1 million)","Large (>1 million)"]},{question:"Would you like the population distribution to be mostly urban?",type:"boolean"},{question:"What would your ideal median age range be?",type:"list",answerOptions:["20-30yrs","30-40yrs","40+years"]},{question:"What cost of living should your destination have?",type:"list",answerOptions:["High","Average","Low"]},{question:"What percentage of the population should be internet users?",type:"list",answerOptions:["<25%","25%-50%","50%-75%",">75%"]}],determineRecommendations:function(e,t){function n(e,t,n){if(n>=e&&t>=n)return 10;var a=Math.abs(n-e)>Math.abs(n-t)?t:e,o=n>a?.5:1.5,r=20*(1-Math.min(1,Math.abs(n-o*a)/a));return r}return countries=[],t.forEach(function(t,a){var o,r,i,s=0,u=t.labor[e.question2]||0,l=u/7.5>10?10:u/10;i="array"==typeof e.question3?new RegExp(e.question3.join("|"),"i"):new RegExp(e.question3,"i");var c=null!=t.climate.match(i)?10:0,p=e.question4;switch(p){case"Small (<100,000)":r=0,o=1e5;break;case"Medium (100,000-1 million)":r=1e5,o=1e6;break;case"Large (>1 million)":r=1e6,o=1e20}var h,m=n(r,o,t.largestCityPop)||0,g=e.question5;h=g?t.urbanPopulation>50?10:10*t.urbanPopulation/50:t.urbanPopulation<50?10:500/t.urbanPopulation;var d=e.question6;switch(d){case"20-30yrs":r=0,o=30;break;case"30-40yrs":r=30,o=40;break;case"40+years":r=40,o=150}var f=n(r,o,t.medianAge),y=e.question7;switch(y){case"High":r=6e4,o=1e10;break;case"Average":r=3e4,o=6e4;break;case"Low":r=0,o=3e4}var w=n(r,o,t.perCapitaPPP),v=e.question8;switch(v){case"<25%":r=0,o=25;break;case"25%-50%":r=25,o=50;break;case"50%-75%":r=50,o=75;break;default:r=75,o=100}var b=n(r,o,t.internetUsagePerCapita);s=s+l+c+m+h+w+f+b,t.score=s,countries.push(t)}),countries.sort(function(e,t){return e.score>t.score?-1:e.score<t.score?1:e.countryName>t.countryName?1:e.countryName<t.countryName?-1:0}),countries.slice(0,4)}}}),app.factory("countryPage",function(){return{}}),app.factory("userRecommendations",function(){return{}}),app.factory("sharedService",["$rootScope",function(e){var t={};return t.values={},t.worldBankDataUpdate=function(){e.$broadcast("update")},t}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJGh0dHBQcm92aWRlciIsIiRyb3V0ZVByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCJodG1sNU1vZGUiLCJkZWZhdWx0cyIsInVzZVhEb21haW4iLCJoZWFkZXJzIiwiY29tbW9uIiwiaW50ZXJjZXB0b3JzIiwicHVzaCIsInRoZW1lIiwicHJpbWFyeVBhbGV0dGUiLCJhY2NlbnRQYWxldHRlIiwid2FyblBhbGV0dGUiLCJiYWNrZ3JvdW5kUGFsZXR0ZSIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiYXV0aFNlcnZpY2UiLCJjb3VudHJ5UGFnZSIsInF1ZXN0aW9ubmFpcmUiLCJ1c2VyUmVjb21tZW5kYXRpb25zIiwiJGh0dHAiLCIkcm9vdFNjb3BlIiwiJHNjb3BlIiwiJGxvY2F0aW9uIiwidXNlciIsImdldFVzZXIiLCJ1c2VybmFtZSIsImdldCIsInRoZW4iLCJ1c2VyQW5zd2VycyIsImRhdGEiLCJwb3N0IiwibGFuZ3VhZ2VPcHRpb24iLCJsYW5ndWFnZSIsInF1ZXN0aW9uMSIsImNvdW50cmllc1RvU2VhcmNoIiwicmVjb21tZW5kYXRpb25zIiwiZGV0ZXJtaW5lUmVjb21tZW5kYXRpb25zIiwiY291bnRyaWVzIiwicGF0aCIsImludHJvUXVlc3Rpb25zIiwicXVlc3Rpb24iLCJyb3V0ZSIsInF1ZXN0aW9uTnVtIiwic2hvd0J1dHRvbnMiLCJnZXRRdWVzdGlvbiIsImFuc3dlciIsImxlbmd0aCIsInNldENvdW50cnlQYWdlIiwiY291bnRyeSIsIm5hbWUiLCJjb3VudHJ5TmFtZSIsImFiYnJldmlhdGlvbiIsImxhcmdlc3RDaXR5TmFtZSIsImxhcmdlc3RDaXR5UG9wIiwibWFqb3JpdHlMYW5ndWFnZSIsIm1lZGlhbkFnZSIsInJlZ2lzdGVyIiwibmV3VXNlciIsImZvcm0iLCJ1c2VyTmFtZSIsImVtYWlsIiwicGFzc3dvcmQiLCJsYXN0TmFtZSIsImZpcnN0TmFtZSIsInBhc3N3b3JkQ29uZmlybSIsInJlc3BvbnNlIiwic2hhcmVkU2VydmljZSIsIndvcmxkQmFua0RhdGEiLCJnZXREYXRhIiwiY29sdW1uMSIsInNsaWNlIiwiY29sdW1uMiIsIm1lZGlXaWtpQ291bnRyeU5hbWUiLCJlbmNvZGVVUkkiLCJnZXRGbGFnIiwiZmxhZ1VybCIsIiRtZFRvYXN0Iiwic2lnbkluIiwic2F2ZVRva2VuIiwiZXJyb3JUb2FzdCIsImVycm9yIiwibWVzc2FnZSIsInNob3ciLCJzaW1wbGUiLCJjb250ZW50IiwiaGlkZURlbGF5IiwibG9nb3V0IiwibG9hZEFsbCIsImxpc3QiLCJtYXAiLCJpdGVtIiwidmFsdWUiLCJ0b0xvd2VyQ2FzZSIsImRpc3BsYXkiLCJjcmVhdGVGaWx0ZXJGb3IiLCJxdWVyeSIsImxvd2VyY2FzZVF1ZXJ5IiwibG93ZXJjYXNlIiwiaW5kZXhPZiIsInF1ZXN0aW9ucyIsInF1ZXN0aW9uUmVzcG9uc2VzIiwidXNlclF1ZXN0aW9ubmFpcmUiLCJhbnN3ZXJzIiwicXVlcnlTZWFyY2giLCJmaWx0ZXIiLCJwdXNoQW5zd2VyIiwic2hvd0Fuc3dlcnMiLCJzZWFyY2hUZXh0IiwidHlwZSIsImFuc3dlck9wdGlvbnMiLCJsb2dBbnN3ZXIiLCJjb25zdHJ1Y3RvciIsIkFycmF5Iiwiam9pbiIsImFkZENvdW50cnkiLCJ1c2VyQ291bnRyaWVzIiwiZGVsZXRlUXVlc3Rpb25uYWlyZSIsInNlcnZpY2UiLCIkd2luZG93IiwidGhpcyIsInBhcnNlSnd0IiwidG9rZW4iLCJiYXNlNjRVcmwiLCJzcGxpdCIsImJhc2U2NCIsInJlcGxhY2UiLCJKU09OIiwicGFyc2UiLCJhdG9iIiwibG9jYWxTdG9yYWdlIiwiand0VG9rZW4iLCJnZXRUb2tlbiIsImlzQXV0aGVkIiwicGFyYW1zIiwibm90RXhwaXJlZCIsIk1hdGgiLCJyb3VuZCIsIkRhdGUiLCJnZXRUaW1lIiwiZXhwIiwiZmFjdG9yeSIsIiRxIiwicmVxdWVzdCIsIkF1dGhvcml6YXRpb24iLCJzZWFyY2giLCJhY2Nlc3NfdG9rZW4iLCJ1bmRlZmluZWQiLCJzdGF0dXMiLCJyZXNwb25zZUVycm9yIiwicmVqZWN0IiwicXVlc3Rpb25uYWlyZUFuc3dlcnMiLCJnZXRQcm9wb3J0aW9uYWxTY29yZSIsImxvd2VyTGltaXQiLCJ1cHBlckxpbWl0IiwibGltaXQiLCJhYnMiLCJtdWx0aXBsaWVyIiwic2NvcmUiLCJtaW4iLCJmb3JFYWNoIiwiaW5kZXgiLCJjbGltYXRlU3RyaW5nIiwibGFib3JQZXJjZW50IiwibGFib3IiLCJxdWVzdGlvbjIiLCJsYWJvclNjb3JlIiwicXVlc3Rpb24zIiwiUmVnRXhwIiwiY2xpbWF0ZVNjb3JlIiwiY2xpbWF0ZSIsIm1hdGNoIiwidXNlckxhcmdlc3RDaXR5UG9wIiwicXVlc3Rpb240IiwidXJiYW5Qb3B1bGF0aW9uU2NvcmUiLCJsYXJnZXN0Q2l0eVBvcFNjb3JlIiwidXNlclVyYmFuUG9wdWxhdGlvbiIsInF1ZXN0aW9uNSIsInVyYmFuUG9wdWxhdGlvbiIsInVzZXJNZWRpYW5BZ2UiLCJxdWVzdGlvbjYiLCJtZWRpYW5BZ2VTY29yZSIsInVzZXJQZXJDYXBpdGFQUFAiLCJxdWVzdGlvbjciLCJwZXJDYXBpdGFQUFBTY29yZSIsInBlckNhcGl0YVBQUCIsInVzZXJJbnRlcm5ldFVzYWdlUGVyQ2FwaXRhIiwicXVlc3Rpb244IiwiaW50ZXJuZXRVc2FnZVNjb3JlIiwiaW50ZXJuZXRVc2FnZVBlckNhcGl0YSIsInNvcnQiLCJhIiwiYiIsIm15U2hhcmVkU2VydmljZSIsInZhbHVlcyIsIndvcmxkQmFua0RhdGFVcGRhdGUiLCIkYnJvYWRjYXN0Il0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxLQUFBQyxRQUFBQyxPQUFBLFdBQUEsVUFBQSxhQUFBLGFBQUEsb0JBRUFGLEtBQUFHLFFBQUEsZ0JBQUEsaUJBQUEsb0JBQUEscUJBQUEsU0FBQUMsRUFBQUMsRUFBQUMs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LElBQ0FDLEVBQUEsR0FDQSxNQUNBLEtBQUEsTUFDQUQsRUFBQSxFQUNBQyxFQUFBLElBS0EsR0FBQThCLEdBQUFoQyxFQUFBQyxFQUFBQyxFQUFBekcsRUFBQXdJLGNBRUFDLEVBQUFuQyxFQUFBb0MsU0FDQSxRQUFBRCxHQUNBLElBQUEsT0FDQWpDLEVBQUEsRUFDQUMsRUFBQSxFQUNBLE1BQ0EsS0FBQSxVQUNBRCxFQUFBLEdBQ0FDLEVBQUEsRUFDQSxNQUNBLEtBQUEsVUFDQUQsRUFBQSxHQUNBQyxFQUFBLEVBQ0EsTUFDQSxTQUNBRCxFQUFBLEdBQ0FDLEVBQUEsSUFJQSxHQUFBa0MsR0FBQXBDLEVBQUFDLEVBQUFDLEVBQUF6RyxFQUFBNEksdUJBQ0EvQixHQUFBQSxFQUFBUSxFQUFBRyxFQUFBTSxFQUFBRCxFQUFBVSxFQUFBSCxFQUFBTyxFQUNBM0ksRUFBQTZHLE1BQUFBLEVBQ0F4SCxVQUFBakMsS0FBQTRDLEtBR0FYLFVBQUF3SixLQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQUQsR0FBQWpDLE1BQUFrQyxFQUFBbEMsTUFDQSxHQUVBaUMsRUFBQWpDLE1BQUFrQyxFQUFBbEMsTUFDQSxFQUVBaUMsRUFBQTVJLFlBQUE2SSxFQUFBN0ksWUFDQSxFQUVBNEksRUFBQTVJLFlBQUE2SSxFQUFBN0ksWUFDQSxHQUVBLElBR0FiLFVBQUFpQyxNQUFBLEVBQUEsT0FLQWhGLElBQUFzSixRQUFBLGNBQUEsV0FDQSxXQUdBdEosSUFBQXNKLFFBQUEsc0JBQUEsV0FDQSxXQUdBdEosSUFBQXNKLFFBQUEsaUJBQUEsYUFBQSxTQUFBeEgsR0FDQSxHQUFBNEssS0FRQSxPQU5BQSxHQUFBQyxVQUVBRCxFQUFBRSxvQkFBQSxXQUNBOUssRUFBQStLLFdBQUEsV0FHQUgiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnTmV4dFBhdCcsIFsnbmdSb3V0ZScsJ25nTWF0ZXJpYWwnLCduZ01lc3NhZ2VzJywndmFsaWRhdGlvbi5tYXRjaCddKTtcblxuYXBwLmNvbmZpZyhbJyRodHRwUHJvdmlkZXInLCckcm91dGVQcm92aWRlcicsJyRsb2NhdGlvblByb3ZpZGVyJywnJG1kVGhlbWluZ1Byb3ZpZGVyJywgZnVuY3Rpb24oJGh0dHBQcm92aWRlciwkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIsJG1kVGhlbWluZ1Byb3ZpZGVyKXtcblxuICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcblxuICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMudXNlWERvbWFpbiA9IHRydWU7XG4gICAgZGVsZXRlICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtUmVxdWVzdGVkLVdpdGgnXTtcblxuICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ2F1dGhJbnRlcmNlcHRvcicpO1xuXG4gICAgJG1kVGhlbWluZ1Byb3ZpZGVyXG4gICAgICAgIC50aGVtZSgnZGVmYXVsdCcpXG4gICAgICAgIC5wcmltYXJ5UGFsZXR0ZSgnYmx1ZS1ncmV5JylcbiAgICAgICAgLmFjY2VudFBhbGV0dGUoJ2dyZXknKVxuICAgICAgICAud2FyblBhbGV0dGUoJ3JlZCcpXG4gICAgICAgIC5iYWNrZ3JvdW5kUGFsZXR0ZSgnYmx1ZS1ncmV5Jyk7XG5cbiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvJyxcbiAgICAgICAge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3MvaG9tZS5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdob21lQ29udHJvbGxlcidcbiAgICAgICAgfSkud2hlbignL2Fib3V0JyxcbiAgICAgICAge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3MvYWJvdXQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnYWJvdXRDb250cm9sbGVyJ1xuICAgICAgICB9KS53aGVuKCcvY29udGFjdCcsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL2NvbnRhY3QuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnY29udGFjdENvbnRyb2xsZXInXG4gICAgICAgIH0pLndoZW4oJy9sb2dpbicsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL2xvZ2luLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2xvZ2luQ29udHJvbGxlcidcbiAgICAgICAgfSkud2hlbignL3NpZ25VcCcsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL3NpZ25VcC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzaWduVXBDb250cm9sbGVyJ1xuICAgICAgICB9KS53aGVuKCcvcXVlc3Rpb25uYWlyZScsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL3F1ZXN0aW9ubmFpcmUuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAncXVlc3Rpb25uYWlyZUNvbnRyb2xsZXInXG4gICAgICAgIH0pLndoZW4oJy9oZWxwJyxcbiAgICAgICAge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3MvaGVscC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdoZWxwQ29udHJvbGxlcidcbiAgICAgICAgfSkud2hlbignL2NvdW50cnknLFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9jb3VudHJ5Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2NvdW50cnlDb250cm9sbGVyJ1xuICAgICAgICB9KS5vdGhlcndpc2Uoe1xuICAgICAgICByZWRpcmVjdFRvOiAnLydcbiAgICB9KTtcbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ2hvbWVDb250cm9sbGVyJywgWydhdXRoU2VydmljZScsJ2NvdW50cnlQYWdlJywncXVlc3Rpb25uYWlyZScsJ3VzZXJSZWNvbW1lbmRhdGlvbnMnLCckaHR0cCcsJyRyb290U2NvcGUnLCckc2NvcGUnLCckbG9jYXRpb24nLCBmdW5jdGlvbihhdXRoU2VydmljZSxjb3VudHJ5UGFnZSxxdWVzdGlvbm5haXJlLHVzZXJSZWNvbW1lbmRhdGlvbnMsJGh0dHAsJHJvb3RTY29wZSwkc2NvcGUsJGxvY2F0aW9uKXtcblxuICAgICRyb290U2NvcGUudXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcbiAgICBpZigkcm9vdFNjb3BlLnVzZXIgJiYgJHJvb3RTY29wZS51c2VyLnVzZXJuYW1lKXtcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9hcGkvcXVlc3Rpb25uYWlyZS8nKyRyb290U2NvcGUudXNlci51c2VybmFtZSkuXG4gICAgICAgICAgICAgICAgICAgIHRoZW4oZnVuY3Rpb24odXNlckFuc3dlcnMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIHVzZXJBbnN3ZXJzLmRhdGEgPT0gJ29iamVjdCcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJy9hcGkvd29ybGRGYWN0Ym9vaycse2xhbmd1YWdlT3B0aW9uOnRydWUsbGFuZ3VhZ2U6dXNlckFuc3dlcnMuZGF0YS5xdWVzdGlvbjF9KS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbihmdW5jdGlvbihjb3VudHJpZXNUb1NlYXJjaCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVjb21tZW5kYXRpb25zID0gcXVlc3Rpb25uYWlyZS5kZXRlcm1pbmVSZWNvbW1lbmRhdGlvbnModXNlckFuc3dlcnMuZGF0YSxjb3VudHJpZXNUb1NlYXJjaC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJSZWNvbW1lbmRhdGlvbnMuY291bnRyaWVzID0gJHNjb3BlLnJlY29tbWVuZGF0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9xdWVzdGlvbm5haXJlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICB9IGVsc2V7XG4gICAgICAgICAgICB2YXIgaW50cm9RdWVzdGlvbnMgPSBbe3F1ZXN0aW9uOiBcIkhhdmUgeW91IGJlZW4gaGVyZSBiZWZvcmU/XCIsIHJvdXRlOidsb2dpbid9LFxuICAgICAgICAgICAgICAgIHtxdWVzdGlvbjogXCJXb3VsZCB5b3UgbGlrZSB0byBzaWduIHVwP1wiLCByb3V0ZTogJ3NpZ25VcCd9LFxuICAgICAgICAgICAgICAgIHtxdWVzdGlvbjogXCJPa2F5LCB5b3Ugd29uJ3QgYmUgYWJsZSB0byBkbyBtdWNoLi4uXCJ9XTtcbiAgICAgICAgICAgICRzY29wZS5xdWVzdGlvbiA9IGludHJvUXVlc3Rpb25zWzBdLnF1ZXN0aW9uO1xuICAgICAgICAgICAgdmFyIHF1ZXN0aW9uTnVtID0gMDtcbiAgICAgICAgICAgICRzY29wZS5zaG93QnV0dG9ucyA9IHRydWU7XG4gICAgICAgICAgICAkc2NvcGUuZ2V0UXVlc3Rpb24gPSBmdW5jdGlvbihhbnN3ZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcXVlc3Rpb25UZXh0ID0gaW50cm9RdWVzdGlvbnNbcXVlc3Rpb25OdW1dLnF1ZXN0aW9uO1xuICAgICAgICAgICAgICAgIHZhciByb3V0ZSA9IGludHJvUXVlc3Rpb25zW3F1ZXN0aW9uTnVtXS5yb3V0ZTtcbiAgICAgICAgICAgICAgICBpZiAoYW5zd2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKHJvdXRlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uTnVtKys7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5xdWVzdGlvbiA9IGludHJvUXVlc3Rpb25zW3F1ZXN0aW9uTnVtXS5xdWVzdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgaWYocXVlc3Rpb25OdW0gPT0gaW50cm9RdWVzdGlvbnMubGVuZ3RoLTEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dCdXR0b25zID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAkc2NvcGUuc2V0Q291bnRyeVBhZ2UgPSBmdW5jdGlvbihjb3VudHJ5KXtcblxuICAgICAgICBjb3VudHJ5UGFnZS5uYW1lID0gY291bnRyeS5jb3VudHJ5TmFtZTtcbiAgICAgICAgY291bnRyeVBhZ2UuYWJicmV2aWF0aW9uID0gY291bnRyeS5hYmJyZXZpYXRpb247XG4gICAgICAgIGNvdW50cnlQYWdlLmxhcmdlc3RDaXR5TmFtZSA9IGNvdW50cnkubGFyZ2VzdENpdHlOYW1lID8gY291bnRyeS5sYXJnZXN0Q2l0eU5hbWUgOiBcIk5vIEluZm9ybWF0aW9uXCI7XG4gICAgICAgIGNvdW50cnlQYWdlLmxhcmdlc3RDaXR5UG9wID0gY291bnRyeS5sYXJnZXN0Q2l0eVBvcCA/IGNvdW50cnkubGFyZ2VzdENpdHlQb3AgOiBcIk5vIEluZm9ybWF0aW9uXCI7XG4gICAgICAgIGNvdW50cnlQYWdlLm1ham9yaXR5TGFuZ3VhZ2UgPSBjb3VudHJ5Lm1ham9yaXR5TGFuZ3VhZ2U7XG4gICAgICAgIGNvdW50cnlQYWdlLm1lZGlhbkFnZSA9IGNvdW50cnkubWVkaWFuQWdlO1xuICAgICAgICAvL2NvdW50cnlQYWdlID0gY291bnRyeTtcblxuICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2NvdW50cnknKTtcblxuXG4gICAgfTtcblxufV0pO1xuXG5hcHAuY29udHJvbGxlcignYWJvdXRDb250cm9sbGVyJywgWyckc2NvcGUnLGZ1bmN0aW9uKCRzY29wZSl7XG59XSk7XG5cbmFwcC5jb250cm9sbGVyKCdjb250YWN0Q29udHJvbGxlcicsWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpe1xufV0pO1xuXG5hcHAuY29udHJvbGxlcignc2lnblVwQ29udHJvbGxlcicsWyckbG9jYXRpb24nLCckc2NvcGUnLCckaHR0cCcsIGZ1bmN0aW9uKCRsb2NhdGlvbiwkc2NvcGUsJGh0dHApe1xuXG4gICAgJHNjb3BlLnJlZ2lzdGVyID0gZnVuY3Rpb24oKXtcblxuICAgICAgICB2YXIgbmV3VXNlciA9IHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiAkc2NvcGUuZm9ybS51c2VyTmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiAkc2NvcGUuZm9ybS5lbWFpbCxcbiAgICAgICAgICAgIHBhc3N3b3JkOiAkc2NvcGUuZm9ybS5wYXNzd29yZCxcbiAgICAgICAgICAgIGxhc3ROYW1lOiAkc2NvcGUuZm9ybS5sYXN0TmFtZSxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogJHNjb3BlLmZvcm0uZmlyc3ROYW1lLFxuICAgICAgICAgICAgcGFzc3dvcmRDb25maXJtOiAkc2NvcGUuZm9ybS5wYXNzd29yZENvbmZpcm1cbiAgICAgICAgfTtcbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaS9yZWdpc3RlcicsbmV3VXNlcilcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ2NvdW50cnlDb250cm9sbGVyJywgWydzaGFyZWRTZXJ2aWNlJywnY291bnRyeVBhZ2UnLCckc2NvcGUnLCckaHR0cCcsIGZ1bmN0aW9uKHNoYXJlZFNlcnZpY2UsY291bnRyeVBhZ2UsJHNjb3BlLCRodHRwKXtcbiAgICAkc2NvcGUuY291bnRyeU5hbWUgPSBjb3VudHJ5UGFnZS5uYW1lO1xuICAgICRzY29wZS5hYmJyZXZpYXRpb24gPSBjb3VudHJ5UGFnZS5hYmJyZXZpYXRpb247XG4gICAgJHNjb3BlLmxhcmdlc3RDaXR5TmFtZSA9IGNvdW50cnlQYWdlLmxhcmdlc3RDaXR5TmFtZTtcbiAgICAkc2NvcGUubGFyZ2VzdENpdHlQb3AgPSBjb3VudHJ5UGFnZS5sYXJnZXN0Q2l0eVBvcDtcbiAgICAkc2NvcGUubWFqb3JpdHlMYW5ndWFnZSA9IGNvdW50cnlQYWdlLm1ham9yaXR5TGFuZ3VhZ2U7XG4gICAgJHNjb3BlLm1lZGlhbkFnZSA9IGNvdW50cnlQYWdlLm1lZGlhbkFnZTtcbiAgICAkc2NvcGUud29ybGRCYW5rRGF0YSA9IHt9O1xuXG4gICAgdmFyIGdldERhdGEgPSBmdW5jdGlvbigpe1xuICAgICAgICAkaHR0cC5nZXQoJy9leHRlcm5hbEFQSXMvd29ybGRCYW5rRGF0YS8nKyRzY29wZS5hYmJyZXZpYXRpb24pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLndvcmxkQmFua0RhdGEuY29sdW1uMSA9IHJlc3BvbnNlLmRhdGEuc2xpY2UoMCxyZXNwb25zZS5kYXRhLmxlbmd0aC8yKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUud29ybGRCYW5rRGF0YS5jb2x1bW4yID0gcmVzcG9uc2UuZGF0YS5zbGljZShyZXNwb25zZS5kYXRhLmxlbmd0aC8yLHJlc3BvbnNlLmRhdGEubGVuZ3RoKTtcblxuICAgICAgICAgICAgfSxmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IFwiVGhlcmUgd2FzIGFuIGVycm9yLCB0cnkgYWdhaW4gbGF0ZXIhXCI7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZ2V0RGF0YSgpO1xuXG4gICAgdmFyIG1lZGlXaWtpQ291bnRyeU5hbWUgPSBlbmNvZGVVUkkoJHNjb3BlLmNvdW50cnlOYW1lKTtcblxuICAgIHZhciBnZXRGbGFnID0gZnVuY3Rpb24oKXtcbiAgICAgICAgJGh0dHAuZ2V0KCcvZXh0ZXJuYWxBUElzL21lZGlXaWtpLycrIG1lZGlXaWtpQ291bnRyeU5hbWUpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZsYWdVcmwgPSByZXNwb25zZS5kYXRhO1xuXG4gICAgICAgICAgICB9LGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgICRzY29wZS5kYXRhID0gXCJUaGVyZSB3YXMgYW4gZXJyb3IsIHRyeSBhZ2FpbiBsYXRlciFcIjtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBnZXRGbGFnKCk7XG5cbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ2xvZ2luQ29udHJvbGxlcicsIFsnJG1kVG9hc3QnLCckc2NvcGUnLCAnJGh0dHAnLCAnYXV0aFNlcnZpY2UnLCAnJGxvY2F0aW9uJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkbWRUb2FzdCwkc2NvcGUsICRodHRwLCBhdXRoU2VydmljZSwgJGxvY2F0aW9uLCAkcm9vdFNjb3BlKXtcbiAgICAkc2NvcGUuc2lnbkluID0gZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHVzZXIgPSB7XG4gICAgICAgICAgICB1c2VybmFtZTogJHNjb3BlLmZvcm0udXNlck5hbWUsXG4gICAgICAgICAgICBwYXNzd29yZDogJHNjb3BlLmZvcm0ucGFzc3dvcmRcbiAgICAgICAgfTtcblxuICAgICAgICAkaHR0cC5wb3N0KCdhcGkvbG9naW4nLCB1c2VyKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgYXV0aFNlcnZpY2Uuc2F2ZVRva2VuKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUudXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9cIik7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yVG9hc3QocmVzcG9uc2UuZGF0YS5lcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmVycm9yVG9hc3QgPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICAgICRtZFRvYXN0LnNob3coXG4gICAgICAgICAgICAkbWRUb2FzdC5zaW1wbGUoKVxuICAgICAgICAgICAgICAgIC5jb250ZW50KG1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxuICAgICAgICApO1xuICAgIH07XG5cbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ25hdkN0cmwnLCBbJ3VzZXJSZWNvbW1lbmRhdGlvbnMnLCdhdXRoU2VydmljZScsJyRzY29wZScsJyRyb290U2NvcGUnLCckbG9jYXRpb24nLCckaHR0cCcsIGZ1bmN0aW9uKHVzZXJSZWNvbW1lbmRhdGlvbnMsYXV0aFNlcnZpY2UsICRzY29wZSwkcm9vdFNjb3BlLCAkbG9jYXRpb24sJGh0dHApe1xuICAgICRyb290U2NvcGUudXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcblxuICAgIGlmKCRyb290U2NvcGUudXNlciAmJiAkcm9vdFNjb3BlLnVzZXIudXNlcm5hbWUpe1xuICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycpO1xuICAgIH1cblxuICAgICRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbigpe1xuICAgICAgICAkaHR0cC5nZXQoJy9hcGkvbG9nb3V0JykuXG4gICAgICAgICAgICB0aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBhdXRoU2VydmljZS5sb2dvdXQoKTtcbiAgICAgICAgJHJvb3RTY29wZS51c2VyID0gYXV0aFNlcnZpY2UuZ2V0VXNlcigpO1xuICAgICAgICB1c2VyUmVjb21tZW5kYXRpb25zID0ge307XG4gICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2hvbWVcIik7XG4gICAgfVxufV0pO1xuXG5hcHAuY29udHJvbGxlcignaGVscENvbnRyb2xsZXInLFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKXtcbiAgICAkc2NvcGUubWVzc2FnZSA9IFwiSSdtIGEgaGVscCBwYWdlIHRoYXQgY3VycmVudGx5IGRvZXNuJ3QgaGVscCBhdCBhbGxcIjtcbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ3F1ZXN0aW9ubmFpcmVDb250cm9sbGVyJyxbJ2NvdW50cnlQYWdlJywndXNlclJlY29tbWVuZGF0aW9ucycsJ3F1ZXN0aW9ubmFpcmUnLCckcm9vdFNjb3BlJywnJHNjb3BlJywnJGxvY2F0aW9uJywgJyRodHRwJyxmdW5jdGlvbihjb3VudHJ5UGFnZSx1c2VyUmVjb21tZW5kYXRpb25zLHF1ZXN0aW9ubmFpcmUsJHJvb3RTY29wZSwkc2NvcGUsJGxvY2F0aW9uLCRodHRwKXtcblxuICAgIGlmKCEkcm9vdFNjb3BlLnVzZXIudXNlcm5hbWUpe1xuICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycpO1xuICAgIH1cblxuICAgIHZhciBxdWVzdGlvbnMgPSBxdWVzdGlvbm5haXJlLnF1ZXN0aW9ucztcbiAgICB2YXIgcXVlc3Rpb25SZXNwb25zZXMgPSB7fTtcbiAgICB2YXIgdXNlclF1ZXN0aW9ubmFpcmUgPSB7fTtcblxuICAgICRzY29wZS5xdWVzdGlvbk51bSA9IDA7XG4gICAgJHNjb3BlLmRhdGEgPSB7fTtcbiAgICAkc2NvcGUuZGF0YSA9IHt9O1xuICAgICRzY29wZS5hbnN3ZXJzID0gW107XG5cblxuICAgICRzY29wZS5xdWVyeVNlYXJjaCA9IGZ1bmN0aW9uKHF1ZXJ5KSB7XG4gICAgICAgIHJldHVybiBxdWVyeSA/ICRzY29wZS5saXN0LmZpbHRlciggY3JlYXRlRmlsdGVyRm9yKHF1ZXJ5KSApIDogJHNjb3BlLmxpc3Q7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvYWRBbGwoKSB7XG5cbiAgICAgICAgcmV0dXJuICRzY29wZS5saXN0Lm1hcCggZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0udG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpdGVtXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVGaWx0ZXJGb3IocXVlcnkpIHtcbiAgICAgICAgdmFyIGxvd2VyY2FzZVF1ZXJ5ID0gYW5ndWxhci5sb3dlcmNhc2UocXVlcnkpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZmlsdGVyRm4oaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIChpdGVtLnZhbHVlLmluZGV4T2YobG93ZXJjYXNlUXVlcnkpID09PSAwKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAkc2NvcGUucHVzaEFuc3dlciA9IGZ1bmN0aW9uKGFuc3dlcil7XG4gICAgICAgIGlmKGFuc3dlcil7XG4gICAgICAgICAgICAkc2NvcGUuYW5zd2Vycy5wdXNoKGFuc3dlcik7XG4gICAgICAgICAgICAkc2NvcGUuZGF0YS5zaG93QW5zd2VycyA9IHRydWU7XG4gICAgICAgICAgICAkc2NvcGUuc2VhcmNoVGV4dCA9ICcnO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpZigkcm9vdFNjb3BlLnVzZXIudXNlcm5hbWUpe1xuICAgICAgICAkaHR0cC5nZXQoJy9hcGkvcXVlc3Rpb25uYWlyZS8nKyRyb290U2NvcGUudXNlci51c2VybmFtZSkuXG4gICAgICAgICAgICB0aGVuKGZ1bmN0aW9uKHVzZXJBbnN3ZXJzKXtcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgdXNlckFuc3dlcnMuZGF0YSA9PSAnb2JqZWN0Jyl7XG4gICAgICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJy9hcGkvd29ybGRGYWN0Ym9vaycse2xhbmd1YWdlT3B0aW9uOnRydWUsbGFuZ3VhZ2U6dXNlckFuc3dlcnMuZGF0YS5xdWVzdGlvbjF9KS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZW4oZnVuY3Rpb24oY291bnRyaWVzVG9TZWFyY2gpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZWNvbW1lbmRhdGlvbnMgPSBxdWVzdGlvbm5haXJlLmRldGVybWluZVJlY29tbWVuZGF0aW9ucyh1c2VyQW5zd2Vycy5kYXRhLGNvdW50cmllc1RvU2VhcmNoLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJSZWNvbW1lbmRhdGlvbnMuY291bnRyaWVzID0gJHNjb3BlLnJlY29tbWVuZGF0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0UXVlc3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QgPSBsb2FkQWxsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAkc2NvcGUuZ2V0UXVlc3Rpb24gPSBmdW5jdGlvbigpe1xuICAgICAgICAkc2NvcGUuZGF0YS5zaG93QW5zd2VycyA9IGZhbHNlO1xuXG4gICAgICAgIGlmKCRzY29wZS5xdWVzdGlvbk51bT09cXVlc3Rpb25zLmxlbmd0aCl7XG4gICAgICAgICAgICAkc2NvcGUucXVlc3Rpb24gPSAnWW91ciBsaXN0IGlzIGJlaW5nIGdlbmVyYXRlZCEnO1xuICAgICAgICAgICAgdXNlclF1ZXN0aW9ubmFpcmUudXNlcm5hbWUgPSAkcm9vdFNjb3BlLnVzZXIudXNlcm5hbWU7XG4gICAgICAgICAgICB1c2VyUXVlc3Rpb25uYWlyZS5xdWVzdGlvblJlc3BvbnNlcyA9IHF1ZXN0aW9uUmVzcG9uc2VzO1xuICAgICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS9xdWVzdGlvbm5haXJlJyx1c2VyUXVlc3Rpb25uYWlyZSk7XG4gICAgICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3dvcmxkRmFjdGJvb2snLHtsYW5ndWFnZU9wdGlvbjp0cnVlLGxhbmd1YWdlOnF1ZXN0aW9uUmVzcG9uc2VzLnF1ZXN0aW9uMX0pLlxuICAgICAgICAgICAgICAgIHRoZW4oZnVuY3Rpb24oY291bnRyaWVzVG9TZWFyY2gpe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVjb21tZW5kYXRpb25zID0gcXVlc3Rpb25uYWlyZS5kZXRlcm1pbmVSZWNvbW1lbmRhdGlvbnMocXVlc3Rpb25SZXNwb25zZXMsY291bnRyaWVzVG9TZWFyY2guZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJSZWNvbW1lbmRhdGlvbnMuY291bnRyaWVzID0gJHNjb3BlLnJlY29tbWVuZGF0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRzY29wZS50eXBlID0gJyc7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgJHNjb3BlLnF1ZXN0aW9uID0gcXVlc3Rpb25zWyRzY29wZS5xdWVzdGlvbk51bV0ucXVlc3Rpb247XG4gICAgICAgICAgICAkc2NvcGUudHlwZSA9IHF1ZXN0aW9uc1skc2NvcGUucXVlc3Rpb25OdW1dLnR5cGU7XG4gICAgICAgICAgICBpZigkc2NvcGUudHlwZSA9PSAnbGlzdCcpe1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0ID0gcXVlc3Rpb25zWyRzY29wZS5xdWVzdGlvbk51bV0uYW5zd2VyT3B0aW9ucztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfTtcbiAgICAkc2NvcGUubG9nQW5zd2VyID0gZnVuY3Rpb24oYW5zd2VyKXtcbiAgICAgICAgJHNjb3BlLmRhdGEuc2hvd0Fuc3dlcnMgPSBmYWxzZTtcblxuICAgICAgICAkc2NvcGUucXVlc3Rpb25OdW0rKztcblxuICAgICAgICBpZihhbnN3ZXIuY29uc3RydWN0b3IgPT09IEFycmF5KXtcbiAgICAgICAgICAgIGFuc3dlciA9IGFuc3dlci5qb2luKCcgJylcbiAgICAgICAgfVxuICAgICAgICBxdWVzdGlvblJlc3BvbnNlc1tcInF1ZXN0aW9uXCIrKCRzY29wZS5xdWVzdGlvbk51bSldID0gYW5zd2VyO1xuXG4gICAgICAgICRzY29wZS5hbnN3ZXJzID0gW107XG4gICAgICAgICRzY29wZS5zZWFyY2hUZXh0ID0gJyc7XG5cbiAgICB9O1xuXG4gICAgJHNjb3BlLmFkZENvdW50cnkgPSBmdW5jdGlvbigpe1xuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3VzZXJDb3VudHJpZXMnLHt1c2VybmFtZTogJHJvb3RTY29wZS51c2VyLnVzZXJuYW1lLHVzZXJDb3VudHJpZXM6IFsnZnJhbmNlJywnZ2VybWFueScsJ3NwYWluJ119KS5cbiAgICAgICAgICAgIHRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgICRzY29wZS51c2VyQ291bnRyaWVzID0gcmVzcG9uc2UudXNlckNvdW50cmllcztcbiAgICAgICAgICAgIH0pXG4gICAgfTtcblxuICAgICRzY29wZS5kZWxldGVRdWVzdGlvbm5haXJlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgJGh0dHAuZGVsZXRlKCdhcGkvcXVlc3Rpb25uYWlyZS8nKyRyb290U2NvcGUudXNlci51c2VybmFtZSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICB1c2VyUmVjb21tZW5kYXRpb25zID0ge307XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlY29tbWVuZGF0aW9ucyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICRzY29wZS5xdWVzdGlvbk51bSA9IDA7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmdldFF1ZXN0aW9uKCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QgPSBsb2FkQWxsKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxufV0pO1xuXG5hcHAuc2VydmljZSgnYXV0aFNlcnZpY2UnLCBbJyR3aW5kb3cnLCBmdW5jdGlvbiAoJHdpbmRvdykge1xuICAgIHRoaXMucGFyc2VKd3QgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB2YXIgYmFzZTY0VXJsID0gdG9rZW4uc3BsaXQoJy4nKVsxXTtcbiAgICAgICAgICAgIHZhciBiYXNlNjQgPSBiYXNlNjRVcmwucmVwbGFjZSgnLScsICcrJykucmVwbGFjZSgnXycsICcvJyk7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSgkd2luZG93LmF0b2IoYmFzZTY0KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5zYXZlVG9rZW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW4gPSB0b2tlbjtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuO1xuICAgIH07XG5cbiAgICB0aGlzLmlzQXV0aGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLmdldFRva2VuKCk7XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMucGFyc2VKd3QodG9rZW4pO1xuICAgICAgICAgICAgdmFyIG5vdEV4cGlyZWQgPSBNYXRoLnJvdW5kKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCkgPD0gcGFyYW1zLmV4cDtcbiAgICAgICAgICAgIGlmICghbm90RXhwaXJlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nb3V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm90RXhwaXJlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVsZXRlICR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuO1xuICAgIH07XG5cbiAgICB0aGlzLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlSnd0KHRoaXMuZ2V0VG9rZW4oKSlcbiAgICB9O1xufV0pO1xuXG5hcHAuZmFjdG9yeSgnYXV0aEludGVyY2VwdG9yJywgWyckcScsICckbG9jYXRpb24nLCAnYXV0aFNlcnZpY2UnLCBmdW5jdGlvbiAoJHEsICRsb2NhdGlvbiwgYXV0aFNlcnZpY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1ZXN0OiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuICAgICAgICAgICAgaWYgKGF1dGhTZXJ2aWNlLmlzQXV0aGVkKCkpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgYXV0aFNlcnZpY2UuZ2V0VG9rZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmKCRsb2NhdGlvbi5zZWFyY2goKS5hY2Nlc3NfdG9rZW4pe1xuICAgICAgICAgICAgICAgIGF1dGhTZXJ2aWNlLnNhdmVUb2tlbigkbG9jYXRpb24uc2VhcmNoKCkuYWNjZXNzX3Rva2VuKTtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdhY2Nlc3NfdG9rZW4nLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIHVzZXIgaXMgbm90IGF1dGhlbnRpY2F0ZWRcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9sb2dpblwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSB8fCAkcS53aGVuKHJlc3BvbnNlKTtcbiAgICAgICAgfSwgcmVzcG9uc2VFcnJvcjogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9sb2dpblwiKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgfTtcbn1dKTtcblxuYXBwLmZhY3RvcnkoJ3F1ZXN0aW9ubmFpcmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcXVlc3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246IFwiV2hhdCBsYW5ndWFnZShzKSBkbyB5b3Ugc3BlYWs/XCIsIHR5cGU6ICdsaXN0JyxcbiAgICAgICAgICAgICAgICBhbnN3ZXJPcHRpb25zOiBbJ0FkeWdoZScsICdBbGJhbmlhbicsICdBcmFnb25lc2UnLCAnQXJtZW5pYW4nLCAnQXJvbWFuaWFuJywgJ0FycGl0YW4nLCAnQXN0dXJpYW4nLCAnQXZhcicsICdBemVyYmFpamFuaScsICdCYXNoa2lyJywgJ0Jhc3F1ZScsICdCZWxhcnVzaWFuJywgJ0Jvc25pYW4nLCAnQnJldG9uJywgJ0J1bGdhcmlhbicsICdDYXRhbGFuJywgJ0NoZWNoZW4nLCAnQ2h1dmFzaCcsICdDb3JuaXNoJywgJ0NvcnNpY2FuJywgJ0NyaW1lYW4nLCAnQ3JvYXRpYW4nLCAnQ3plY2gnLCAnRGFuaXNoJywgJ0R1dGNoJywgJ0VuZ2xpc2gnLCAnRXJ6eWEnLCAnRXN0b25pYW4nLCAnRmFyb2VzZScsICdGaW5uaXNoJywgJ0ZyZW5jaCcsICdGcmlzaWFuJywgJ0dhZ2F1eicsICdHYWxpY2lhbicsICdHYWxsbycsICdHZW9yZ2lhbicsICdHZXJtYW4nLCAnR3JlZWsnLCAnSHVuZ2FyaWFuJywgJ0ljZWxhbmRpYycsICdJbmdyaWFuJywgJ0lyaXNoJywgJ0l0YWxpYW4nLCAnS2FiYXJkaWFuJywgJ0thc2h1YmlhbicsICdLYXpha2gnLCAnTGFkaW4nLCAnTGF0aW4nLCAnTGF0dmlhbicsICdMYXonLCAnTGl0aHVhbmlhbicsICdMdXhlbWJvdXJnaXNoJywgJ01hY2Vkb25pYW4nLCAnTWFsdGVzZScsICdNYW54JywgJ01hcmknLCAnTWluZ3JlbGlhbicsICdNaXJhbmRlc2UnLCAnTW9udGVuZWdyaW4nLCAnTm9yd2VnaWFuJywgJ09jY2l0YW4nLCAnT3NzZXRpYW4nLCAnUGljYXJkJywgJ1BvbGlzaCcsICdQb3J0dWd1ZXNlJywgJ1JvbWFuaScsICdSb21hbmlhbicsICdSb21hbnNoJywgJ1J1c3NpYW4nLCAnU2FtaScsICdTYXJkaW5pYW4nLCAnU2NvdHMnLCAnU2NvdHRpc2gnLCdHYWVsaWMnLCAnU2VyYmlhbicsICdTaWxlc2lhbicsICdTbG92YWsnLCAnU2xvdmVuZScsICdTb3JiaWFuJywgJ1NwYW5pc2gnLCAnU3ZhbicsICdTd2VkaXNoJywgJ1RhYmFzYXJhbicsICdUYXRhcicsICdUdXJraXNoJywgJ1VrcmFpbmlhbicsICdWZXBzaWFuJywgJ1bDtXJvJywgJ1dhbGxvb24nLCAnV2Vsc2gnLCAnV3lteXNvcnlzJ11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246ICdXaGF0IGZpZWxkIGRvIHlvdSB3b3JrIGluPycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGFuc3dlck9wdGlvbnM6IFsnQWdyaWN1bHR1cmUnLCAnSW5kdXN0cnknLCAnU2VydmljZXMnXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBxdWVzdGlvbjogJ1doYXQgY2xpbWF0ZShzKSB3b3VsZCB5b3UgcHJlZmVyPycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGFuc3dlck9wdGlvbnM6IFsnVGVtcGVyYXRlJywgJ01lZGl0ZXJyYW5lYW4nLCAnVHJvcGljYWwnLCAnQXJpZCcsICdEZXNlcnQnLCAnTWFyaXRpbWUnLCAnV2V0J11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246ICdXaGF0IGlzIHRoZSBpZGVhbCBzaXplIGZvciB0aGUgbGFyZ2VzdCBtZXRyb3BvbGl0YW4gYXJlYT8nLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdsaXN0JyxcbiAgICAgICAgICAgICAgICBhbnN3ZXJPcHRpb25zOiBbJ1NtYWxsICg8MTAwLDAwMCknLCAnTWVkaXVtICgxMDAsMDAwLTEgbWlsbGlvbiknLCAnTGFyZ2UgKD4xIG1pbGxpb24pJ11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246ICdXb3VsZCB5b3UgbGlrZSB0aGUgcG9wdWxhdGlvbiBkaXN0cmlidXRpb24gdG8gYmUgbW9zdGx5IHVyYmFuPycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiAnV2hhdCB3b3VsZCB5b3VyIGlkZWFsIG1lZGlhbiBhZ2UgcmFuZ2UgYmU/JywgdHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGFuc3dlck9wdGlvbnM6IFsnMjAtMzB5cnMnLCAnMzAtNDB5cnMnLCAnNDAreWVhcnMnXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBxdWVzdGlvbjogJ1doYXQgY29zdCBvZiBsaXZpbmcgc2hvdWxkIHlvdXIgZGVzdGluYXRpb24gaGF2ZT8nLCB0eXBlOidsaXN0JyxcbiAgICAgICAgICAgICAgICBhbnN3ZXJPcHRpb25zOiBbJ0hpZ2gnLCdBdmVyYWdlJywnTG93J11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246ICdXaGF0IHBlcmNlbnRhZ2Ugb2YgdGhlIHBvcHVsYXRpb24gc2hvdWxkIGJlIGludGVybmV0IHVzZXJzPycsIHR5cGU6J2xpc3QnLFxuICAgICAgICAgICAgICAgIGFuc3dlck9wdGlvbnM6IFsnPDI1JScsJzI1JS01MCUnLCc1MCUtNzUlJywnPjc1JSddXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGRldGVybWluZVJlY29tbWVuZGF0aW9uczogZnVuY3Rpb24ocXVlc3Rpb25uYWlyZUFuc3dlcnMsY291bnRyaWVzVG9TZWFyY2gpe1xuXG4gICAgICAgICAgICBjb3VudHJpZXMgPSBbXTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UHJvcG9ydGlvbmFsU2NvcmUobG93ZXJMaW1pdCx1cHBlckxpbWl0LHZhbHVlKXtcblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+PSBsb3dlckxpbWl0ICYmIHZhbHVlIDw9IHVwcGVyTGltaXQpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTA7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW1pdCA9IE1hdGguYWJzKHZhbHVlLWxvd2VyTGltaXQpID4gTWF0aC5hYnModmFsdWUtdXBwZXJMaW1pdCkgPyB1cHBlckxpbWl0IDogbG93ZXJMaW1pdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG11bHRpcGxpZXIgPSB2YWx1ZSA+IGxpbWl0ID8gMC41IDogMS41O1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2NvcmUgPSAyMCooMSAtIE1hdGgubWluKDEsTWF0aC5hYnModmFsdWUgLSBtdWx0aXBsaWVyKmxpbWl0KS9saW1pdCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NvcmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb3VudHJpZXNUb1NlYXJjaC5mb3JFYWNoKGZ1bmN0aW9uKGNvdW50cnksaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2NvcmUgPSAwLCB1cHBlckxpbWl0LCBsb3dlckxpbWl0LCBjbGltYXRlU3RyaW5nO1xuICAgICAgICAgICAgICAgIHZhciBsYWJvclBlcmNlbnQgPSBjb3VudHJ5LmxhYm9yW3F1ZXN0aW9ubmFpcmVBbnN3ZXJzLnF1ZXN0aW9uMl0gfHwgMDtcbiAgICAgICAgICAgICAgICAvL2lmIHVzZXIncyBzcGVjaWZpZWQgaW5kdXN0cnkgaXMgbW9yZSB0aGFuIDc1JSBvZiB0aGUgY291bnRyeSdzIHdvcmtmb3JjZSwgc2V0IHNjb3JlIHRvIDEwXG4gICAgICAgICAgICAgICAgdmFyIGxhYm9yU2NvcmUgPSBsYWJvclBlcmNlbnQvNy41ID4gMTAgPyAxMCA6IGxhYm9yUGVyY2VudC8xMDtcbiAgICAgICAgICAgICAgICAvL2NyZWF0ZSBSZWd1bGFyIEV4cHJlc3Npb24gdG8gY2hlY2sgY2xpbWF0ZSBzdHJpbmcgZm9yIGNsaW1hdGUgYW5zd2Vyc1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcXVlc3Rpb25uYWlyZUFuc3dlcnMucXVlc3Rpb24zID09ICdhcnJheScpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpbWF0ZVN0cmluZyA9IG5ldyBSZWdFeHAocXVlc3Rpb25uYWlyZUFuc3dlcnMucXVlc3Rpb24zLmpvaW4oJ3wnKSwnaScpO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBjbGltYXRlU3RyaW5nID0gbmV3IFJlZ0V4cChxdWVzdGlvbm5haXJlQW5zd2Vycy5xdWVzdGlvbjMsJ2knKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9pZiBjbGltYXRlIHN0cmluZyBjb250YWlucyBvbmUgb2YgdGhlIGNsaW1hdGUgYW5zd2Vycywgc2V0IHNjb3JlIHRvIDEwXG4gICAgICAgICAgICAgICAgdmFyIGNsaW1hdGVTY29yZSA9IGNvdW50cnkuY2xpbWF0ZS5tYXRjaChjbGltYXRlU3RyaW5nKSAhPSBudWxsID8gMTA6IDA7XG5cbiAgICAgICAgICAgICAgICB2YXIgdXNlckxhcmdlc3RDaXR5UG9wID0gcXVlc3Rpb25uYWlyZUFuc3dlcnMucXVlc3Rpb240O1xuICAgICAgICAgICAgICAgIHN3aXRjaCh1c2VyTGFyZ2VzdENpdHlQb3Ape1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdTbWFsbCAoPDEwMCwwMDApJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyTGltaXQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXJMaW1pdCA9IDFFNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdNZWRpdW0gKDEwMCwwMDAtMSBtaWxsaW9uKSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlckxpbWl0ID0gMUU1O1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXJMaW1pdCA9IDFFNjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdMYXJnZSAoPjEgbWlsbGlvbiknOlxuICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJMaW1pdCA9IDFFNjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyTGltaXQgPSAxRTIwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGxhcmdlc3RDaXR5UG9wU2NvcmUgPSBnZXRQcm9wb3J0aW9uYWxTY29yZShsb3dlckxpbWl0LHVwcGVyTGltaXQsY291bnRyeS5sYXJnZXN0Q2l0eVBvcCkgfHwgMDtcblxuICAgICAgICAgICAgICAgIHZhciB1c2VyVXJiYW5Qb3B1bGF0aW9uID0gcXVlc3Rpb25uYWlyZUFuc3dlcnMucXVlc3Rpb241O1xuICAgICAgICAgICAgICAgIHZhciB1cmJhblBvcHVsYXRpb25TY29yZTtcbiAgICAgICAgICAgICAgICBpZih1c2VyVXJiYW5Qb3B1bGF0aW9uKXtcbiAgICAgICAgICAgICAgICAgICAgdXJiYW5Qb3B1bGF0aW9uU2NvcmUgPSBjb3VudHJ5LnVyYmFuUG9wdWxhdGlvbiA+IDUwID8gMTAgOiAxMCpjb3VudHJ5LnVyYmFuUG9wdWxhdGlvbi81MDtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgdXJiYW5Qb3B1bGF0aW9uU2NvcmUgPSBjb3VudHJ5LnVyYmFuUG9wdWxhdGlvbiA8IDUwID8gMTAgOiAxMCo1MC9jb3VudHJ5LnVyYmFuUG9wdWxhdGlvbjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgdXNlck1lZGlhbkFnZSA9IHF1ZXN0aW9ubmFpcmVBbnN3ZXJzLnF1ZXN0aW9uNjtcbiAgICAgICAgICAgICAgICBzd2l0Y2godXNlck1lZGlhbkFnZSl7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzIwLTMweXJzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyTGltaXQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXJMaW1pdCA9IDMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzMwLTQweXJzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyTGltaXQgPSAzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyTGltaXQgPSA0MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICc0MCt5ZWFycyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlckxpbWl0ID0gNDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cHBlckxpbWl0ID0gMTUwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbWVkaWFuQWdlU2NvcmUgPSBnZXRQcm9wb3J0aW9uYWxTY29yZShsb3dlckxpbWl0LHVwcGVyTGltaXQsY291bnRyeS5tZWRpYW5BZ2UpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHVzZXJQZXJDYXBpdGFQUFAgPSBxdWVzdGlvbm5haXJlQW5zd2Vycy5xdWVzdGlvbjc7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHVzZXJQZXJDYXBpdGFQUFApe1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdIaWdoJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyTGltaXQgPSA2MDAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyTGltaXQgPSAxRTEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0F2ZXJhZ2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJMaW1pdCA9IDMwMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXJMaW1pdCA9IDYwMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0xvdyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlckxpbWl0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyTGltaXQgPSAzMDAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBwZXJDYXBpdGFQUFBTY29yZSA9IGdldFByb3BvcnRpb25hbFNjb3JlKGxvd2VyTGltaXQsdXBwZXJMaW1pdCxjb3VudHJ5LnBlckNhcGl0YVBQUCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgdXNlckludGVybmV0VXNhZ2VQZXJDYXBpdGEgPSBxdWVzdGlvbm5haXJlQW5zd2Vycy5xdWVzdGlvbjg7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHVzZXJJbnRlcm5ldFVzYWdlUGVyQ2FwaXRhKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnPDI1JSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlckxpbWl0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyTGltaXQgPSAyNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICcyNSUtNTAlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyTGltaXQgPSAyNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyTGltaXQgPSA1MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICc1MCUtNzUlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyTGltaXQgPSA1MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyTGltaXQgPSA3NTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJMaW1pdCA9IDc1O1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXJMaW1pdCA9IDEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBpbnRlcm5ldFVzYWdlU2NvcmUgPSBnZXRQcm9wb3J0aW9uYWxTY29yZShsb3dlckxpbWl0LHVwcGVyTGltaXQsY291bnRyeS5pbnRlcm5ldFVzYWdlUGVyQ2FwaXRhKTtcbiAgICAgICAgICAgICAgICBzY29yZSA9IHNjb3JlICsgbGFib3JTY29yZSArIGNsaW1hdGVTY29yZSArIGxhcmdlc3RDaXR5UG9wU2NvcmUgKyB1cmJhblBvcHVsYXRpb25TY29yZSArIHBlckNhcGl0YVBQUFNjb3JlICsgbWVkaWFuQWdlU2NvcmUgKyBpbnRlcm5ldFVzYWdlU2NvcmU7XG4gICAgICAgICAgICAgICAgY291bnRyeS5zY29yZSA9IHNjb3JlO1xuICAgICAgICAgICAgICAgIGNvdW50cmllcy5wdXNoKGNvdW50cnkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvdW50cmllcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGEuc2NvcmUgPiBiLnNjb3JlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGEuc2NvcmUgPCBiLnNjb3JlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihhLmNvdW50cnlOYW1lID4gYi5jb3VudHJ5TmFtZSl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihhLmNvdW50cnlOYW1lIDwgYi5jb3VudHJ5TmFtZSl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGNvdW50cmllcy5zbGljZSgwLDQpO1xuICAgICAgICB9XG4gICAgfTtcbn0pO1xuXG5hcHAuZmFjdG9yeSgnY291bnRyeVBhZ2UnLGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHt9O1xufSk7XG5cbmFwcC5mYWN0b3J5KCd1c2VyUmVjb21tZW5kYXRpb25zJyxmdW5jdGlvbigpe1xuICAgIHJldHVybiB7fTtcbn0pO1xuXG5hcHAuZmFjdG9yeSgnc2hhcmVkU2VydmljZScsIFsnJHJvb3RTY29wZScsZnVuY3Rpb24oJHJvb3RTY29wZSl7XG4gICAgdmFyIG15U2hhcmVkU2VydmljZSA9IHt9O1xuXG4gICAgbXlTaGFyZWRTZXJ2aWNlLnZhbHVlcyA9IHt9O1xuXG4gICAgbXlTaGFyZWRTZXJ2aWNlLndvcmxkQmFua0RhdGFVcGRhdGUgPSBmdW5jdGlvbigpe1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3VwZGF0ZScpO1xuICAgIH07XG5cbiAgICByZXR1cm4gbXlTaGFyZWRTZXJ2aWNlO1xufV0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9