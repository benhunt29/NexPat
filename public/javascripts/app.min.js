var app=angular.module("NextPat",["ngRoute","ngMaterial"]);app.config(["$httpProvider","$routeProvider","$locationProvider","$mdThemingProvider",function(e,t,n,o){n.html5Mode(!0),e.interceptors.push("authInterceptor"),o.theme("default").primaryPalette("blue-grey").accentPalette("blue").warnPalette("red").backgroundPalette("blue-grey"),t.when("/",{templateUrl:"/views/home.html",controller:"mainController"}).when("/about",{templateUrl:"/views/about.html",controller:"aboutController"}).when("/contact",{templateUrl:"/views/contact.html",controller:"contactController"}).when("/login",{templateUrl:"/views/login.html",controller:"loginController"}).when("/signUp",{templateUrl:"/views/signUp.html",controller:"loginController"}).when("/questionnaire",{templateUrl:"/views/questionnaire.html",controller:"questionnaireController as ctrl"}).when("/help",{templateUrl:"/views/help.html",controller:"helpController"}).when("/country",{templateUrl:"/views/country.html",controller:"countryController"}).otherwise({redirectTo:"/"})}]),app.controller("mainController",["$scope","$location",function(e,t){var n=[{question:"Have you been here before?",route:"login"},{question:"Would you like to sign up?",route:"signUp"},{question:"Okay, your information will not be saved."}];e.question=n[0].question;var o=0;e.showButtons=!0,e.getQuestion=function(a){var r=(n[o].question,n[o].route);a?t.path(r):(o++,e.question=n[o].question,o==n.length-1&&(e.showButtons=!1))}}]),app.controller("aboutController",["$scope",function(e){e.message="I'm a page that describes this application!"}]),app.controller("contactController",["$scope",function(e){e.message="I'm a page that tells you how to yell (by writing an all-caps email) at the developer!"}]),app.controller("signUpController",["$scope","$http",function(e,t){}]),app.controller("countryController",["countryPage","$scope","$http",function(e,t,n){t.countryName=e.name,console.log(t.nationMasterLink)}]),app.controller("loginController",["$scope","$http","authService","$location","$rootScope",function(e,t,n,o,a){e.submit=function(){t.post("api/login",e.form).then(function(e){n.saveToken(e.data),a.user=n.getUser(),o.path("/questionnaire")})},e.googleLogin=function(){}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location","$http",function(e,t,n,o,a){n.user=e.getUser(),n.user&&n.user.username&&o.path("/questionnaire"),t.logout=function(){a.get("/api/questionnaire/"+n.user.username),a.get("/api/logout").then(function(e){console.log(e)}),e.logout(),n.user=e.getUser(),o.path("/login")}}]),app.controller("helpController",["$scope",function(e){e.message="I'm a help page that currently doesn't help at all"}]),app.controller("questionnaireController",["countryPage","questionnaire","$rootScope","$scope","$location","$http","$log","$q",function(e,t,n,o,a,r,i,s){function u(){return o.list.map(function(e){return{value:e.toLowerCase(),display:e}})}function l(e){var t=angular.lowercase(e);return function(e){return 0===e.value.indexOf(t)}}var c=t.questions,p={},h={};o.questionNum=0,o.data={},o.querySearch=function(e){return e?o.list.filter(l(e)):o.list},o.data={},o.answers=[],o.pushAnswer=function(e){e&&(o.answers.push(e),o.data.showAnswers=!0,console.log("PUSH"))},r.get("/api/questionnaire/"+n.user.username).then(function(e){"object"==typeof e.data?r.post("/api/worldFactbook",{languageOption:!0,language:e.data.question1}).then(function(n){o.recommendations=t.determineRecommendations(e.data,n.data)}):(o.getQuestion(),o.list=u())}),o.getQuestion=function(){o.data.showAnswers=!1,console.log(o.data.showAnswers),o.questionNum==c.length?(o.question="Your list is being generated!",h.username=n.user.username,h.questionResponses=p,console.log(h),r.post("/api/questionnaire",h),r.post("/api/worldFactbook",{languageOption:!0,language:p.question1}).then(function(e){o.recommendations=t.determineRecommendations(p,e.data)}),o.type=""):(o.question=c[o.questionNum].question,o.type=c[o.questionNum].type,console.log(o.question,o.type),"list"==o.type&&(o.list=c[o.questionNum].answerOptions))},o.logAnswer=function(e){o.data.showAnswers=!1,console.log(o.data.showAnswers),o.questionNum++,e.constructor===Array&&(e=e.join(" ")),p["question"+o.questionNum]=e,o.answers=[],o.searchText="",console.log(p)},o.addCountry=function(){r.post("/api/userCountries",{username:n.user.username,userCountries:["france","germany","spain"]}).then(function(e){o.userCountries=e.userCountries})},o.setCountryPage=function(t){e.name=t}}]),app.service("authService",["$window",function(e){this.parseJwt=function(t){if(t){var n=t.split(".")[1],o=n.replace("-","+").replace("_","/");return JSON.parse(e.atob(o))}return{}},this.saveToken=function(t){e.localStorage.jwtToken=t,console.log("Saved token:",e.localStorage.jwtToken)},this.getToken=function(){return e.localStorage.jwtToken},this.isAuthed=function(){var e=this.getToken();if(e){var t=this.parseJwt(e),n=Math.round((new Date).getTime()/1e3)<=t.exp;return n||this.logout(),n}return!1},this.logout=function(){delete e.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.factory("authInterceptor",["$q","$location","authService",function(e,t,n){return{request:function(e){return e.headers=e.headers||{},console.log(e.url),n.isAuthed()&&(e.headers.Authorization="Bearer "+n.getToken()),e},response:function(o){return t.search().access_token&&(n.saveToken(t.search().access_token),t.search("access_token",void 0),console.log(n.getUser())),401===o.status&&t.path("/login"),o||e.when(o)},responseError:function(n){return 401===n.status?t.path("/login"):console.log(n),e.reject(n)}}}]),app.factory("questionnaire",function(){return{questions:[{question:"What language(s) do you speak?",type:"list",answerOptions:["Adyghe","Albanian","Aragonese","Armenian","Aromanian","Arpitan","Asturian","Avar","Azerbaijani","Bashkir","Basque","Belarusian","Bosnian","Breton","Bulgarian","Catalan","Chechen","Chuvash","Cornish","Corsican","Crimean","Croatian","Czech","Danish","Dutch","English","Erzya","Estonian","Faroese","Finnish","French","Frisian","Gagauz","Galician","Gallo","Georgian","German","Greek","Hungarian","Icelandic","Ingrian","Irish","Italian","Kabardian","Kashubian","Kazakh","Ladin","Latin","Latvian","Laz","Lithuanian","Luxembourgish","Macedonian","Maltese","Manx","Mari","Mingrelian","Mirandese","Montenegrin","Norwegian","Occitan","Ossetian","Picard","Polish","Portuguese","Romani","Romanian","Romansh","Russian","Sami","Sardinian","Scots","Scottish","Gaelic","Serbian","Silesian","Slovak","Slovene","Sorbian","Spanish","Svan","Swedish","Tabasaran","Tatar","Turkish","Ukrainian","Vepsian","VÃµro","Walloon","Welsh","Wymysorys"]},{question:"What field do you work in?",type:"list",answerOptions:["Agriculture","Industry","Services"]},{question:"What climate(s) would you prefer?",type:"list",answerOptions:["Temperate","Mediterranean","Tropical","Arid","Desert","Maritime","Wet"]},{question:"What is the ideal size for the largest metropolitan area?",type:"list",answerOptions:["Small (<100,000)","Medium (100,000-1 million)","Large (>1 million)"]},{question:"Would you like the population distribution to be mostly urban?",type:"boolean"},{question:"What would your ideal median age range be?",type:"list",answerOptions:["20-30yrs","30-40yrs","40+years"]},{question:"What cost of living should your destination have?",type:"list",answerOptions:["High","Average","Low"]},{question:"What percentage of the population should be internet users?",type:"list",answerOptions:["<25%","25%-50%","50%-75%",">75%"]}],determineRecommendations:function(e,t){function n(e,t,n){if(n>=e&&t>=n)return 10;var o=Math.abs(n-e)>Math.abs(n-t)?t:e,a=n>o?.5:1.5,r=20*(1-Math.min(1,Math.abs(n-a*o)/o));return r}return countries=[],t.forEach(function(t,o){var a,r,i,s=0,u=t.labor[e.question2]||0,l=u/7.5>10?10:u/10;i="array"==typeof e.question3?new RegExp(e.question3.join("|"),"i"):new RegExp(e.question3,"i");var c=null!=t.climate.match(i)?10:0,p=e.question4;switch(p){case"Small (<100,000)":r=0,a=1e5;break;case"Medium (100,000-1 million)":r=1e5,a=1e6;break;case"Large (>1 million)":r=1e6,a=1e20}var h,g=n(r,a,t.largestCityPop)||0,m=e.question5;h=m?t.urbanPopulation>50?10:10*t.urbanPopulation/50:t.urbanPopulation<50?10:500/t.urbanPopulation;var d=e.question6;switch(d){case"20-30yrs":r=0,a=30;break;case"30-40yrs":r=30,a=40;break;case"40+years":r=40,a=150}var w=n(r,a,t.medianAge),f=e.question7;switch(f){case"High":r=6e4,a=1e10;break;case"Average":r=3e4,a=6e4;break;case"Low":r=0,a=3e4}var y=n(r,a,t.perCapitaPPP),q=e.question8;switch(q){case"<25%":r=0,a=25;break;case"25%-50%":r=25,a=50;break;case"50%-75%":r=50,a=75;break;default:r=75,a=100}var v=n(r,a,t.internetUsagePerCapita);s=s+l+c+g+h+y+w+v,t.score=s,countries.push(t)}),countries.sort(function(e,t){return e.score>t.score?-1:e.score<t.score?1:e.countryName>t.countryName?1:e.countryName<t.countryName?-1:0}),countries.slice(0,4)}}}),app.factory("countryPage",function(){return{}});
//# sourceMappingURL=data:application/json;base64,