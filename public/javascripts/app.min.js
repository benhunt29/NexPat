var app=angular.module("NextPat",["ngRoute","ngMaterial","ngMessages","validation.match"]);app.config(["$httpProvider","$routeProvider","$locationProvider","$mdThemingProvider",function(e,t,n,a){n.html5Mode(!0),e.defaults.useXDomain=!0,delete e.defaults.headers.common["X-Requested-With"],e.interceptors.push("authInterceptor"),a.theme("default").primaryPalette("blue-grey").accentPalette("grey").warnPalette("red").backgroundPalette("blue-grey"),t.when("/",{templateUrl:"/views/home.html",controller:"homeController"}).when("/about",{templateUrl:"/views/about.html",controller:"aboutController"}).when("/contact",{templateUrl:"/views/contact.html",controller:"contactController"}).when("/login",{templateUrl:"/views/login.html",controller:"loginController"}).when("/signUp",{templateUrl:"/views/signUp.html",controller:"signUpController"}).when("/questionnaire",{templateUrl:"/views/questionnaire.html",controller:"questionnaireController"}).when("/help",{templateUrl:"/views/help.html",controller:"helpController"}).when("/country",{templateUrl:"/views/country.html",controller:"countryController"}).otherwise({redirectTo:"/"})}]),app.controller("homeController",["authService","countryPage","questionnaire","userRecommendations","$http","$rootScope","$scope","$location",function(e,t,n,a,o,r,i,s){if(r.user=e.getUser(),r.user&&r.user.username)o.get("/api/questionnaire/"+r.user.username).then(function(e){"object"==typeof e.data?o.post("/api/worldFactbook",{languageOption:!0,language:e.data.question1}).then(function(t){i.recommendations=n.determineRecommendations(e.data,t.data),a.countries=i.recommendations}):s.path("/questionnaire")});else{var u=[{question:"Have you been here before?",route:"login"},{question:"Would you like to sign up?",route:"signUp"},{question:"Okay, you won't be able to do much..."}];i.question=u[0].question;var l=0;i.showButtons=!0,i.getQuestion=function(e){var t=(u[l].question,u[l].route);e?s.path(t):(l++,i.question=u[l].question,l==u.length-1&&(i.showButtons=!1))}}i.setCountryPage=function(e){t.name=e.countryName,t.abbreviation=e.abbreviation,t.largestCityName=e.largestCityName?e.largestCityName:"No Information",t.largestCityPop=e.largestCityPop?e.largestCityPop:"No Information",t.majorityLanguage=e.majorityLanguage,t.medianAge=e.medianAge,s.path("/country")}}]),app.controller("aboutController",["$scope",function(e){}]),app.controller("contactController",["$scope",function(e){}]),app.controller("signUpController",["$mdToast","$location","$scope","$http",function(e,t,n,a){n.register=function(){var e={username:n.form.userName,email:n.form.email,password:n.form.password,lastName:n.form.lastName,firstName:n.form.firstName,passwordConfirm:n.form.passwordConfirm};a.post("/api/register",e).then(function(e){t.path("/login")},function(e){n.errorToast(e.data.error)})},n.errorToast=function(t){e.show(e.simple().content(t).hideDelay(3e3))}}]),app.controller("countryController",["sharedService","countryPage","$scope","$http",function(e,t,n,a){n.countryName=t.name,n.abbreviation=t.abbreviation,n.largestCityName=t.largestCityName,n.largestCityPop=t.largestCityPop,n.majorityLanguage=t.majorityLanguage,n.medianAge=t.medianAge,n.worldBankData={};var o=function(){a.get("/externalAPIs/worldBankData/"+n.abbreviation).then(function(e){n.worldBankData.column1=e.data.slice(0,e.data.length/2),n.worldBankData.column2=e.data.slice(e.data.length/2,e.data.length)},function(e){n.data="There was an error, try again later!"})};o();var r=encodeURI(n.countryName),i=function(){a.get("/externalAPIs/mediWiki/"+r).then(function(e){n.flagUrl=e.data},function(e){n.data="There was an error, try again later!"})};i()}]),app.controller("loginController",["$mdToast","$scope","$http","authService","$location","$rootScope",function(e,t,n,a,o,r){t.signIn=function(){var e={username:t.form.userName,password:t.form.password};n.post("api/login",e).then(function(e){a.saveToken(e.data),r.user=a.getUser(),o.path("/")},function(e){t.errorToast(e.data.error)})},t.errorToast=function(t){e.show(e.simple().content(t).hideDelay(3e3))}}]),app.controller("navCtrl",["userRecommendations","authService","$scope","$rootScope","$location","$http",function(e,t,n,a,o,r){a.user=t.getUser(),a.user&&a.user.username&&o.path("/"),n.logout=function(){r.get("/api/logout").then(function(e){}),t.logout(),a.user=t.getUser(),e={},o.path("/home")}}]),app.controller("helpController",["$scope",function(e){e.message="I'm a help page that currently doesn't help at all"}]),app.controller("questionnaireController",["countryPage","userRecommendations","questionnaire","$rootScope","$scope","$location","$http",function(e,t,n,a,o,r,i){function s(){return o.list.map(function(e){return{value:e.toLowerCase(),display:e}})}function u(e){var t=angular.lowercase(e);return function(e){return 0===e.value.indexOf(t)}}a.user.username||r.path("/");var l=n.questions,c={},p={};o.questionNum=0,o.data={},o.data={},o.answers=[],o.querySearch=function(e){return e?o.list.filter(u(e)):o.list},o.pushAnswer=function(e){e&&(o.answers.push(e),o.data.showAnswers=!0,o.searchText="")},a.user.username&&i.get("/api/questionnaire/"+a.user.username).then(function(e){"object"==typeof e.data?i.post("/api/worldFactbook",{languageOption:!0,language:e.data.question1}).then(function(a){o.recommendations=n.determineRecommendations(e.data,a.data),t.countries=o.recommendations}):(o.getQuestion(),o.list=s())}),o.getQuestion=function(){o.data.showAnswers=!1,o.questionNum==l.length?(o.question="Your list is being generated!",p.username=a.user.username,p.questionResponses=c,i.post("/api/questionnaire",p),i.post("/api/worldFactbook",{languageOption:!0,language:c.question1}).then(function(e){o.recommendations=n.determineRecommendations(c,e.data),t.countries=o.recommendations,r.path("/")}),o.type=""):(o.question=l[o.questionNum].question,o.type=l[o.questionNum].type,"list"==o.type&&(o.list=l[o.questionNum].answerOptions))},o.logAnswer=function(e){o.data.showAnswers=!1,o.questionNum++,e.constructor===Array&&(e=e.join(" ")),c["question"+o.questionNum]=e,o.answers=[],o.searchText=""},o.addCountry=function(){i.post("/api/userCountries",{username:a.user.username,userCountries:["france","germany","spain"]}).then(function(e){o.userCountries=e.userCountries})},o.deleteQuestionnaire=function(){i["delete"]("api/questionnaire/"+a.user.username).then(function(e){t={},o.recommendations=!1,o.questionNum=0,o.getQuestion(),o.list=s()})}}]),app.service("authService",["$window",function(e){this.parseJwt=function(t){if(t){var n=t.split(".")[1],a=n.replace("-","+").replace("_","/");return JSON.parse(e.atob(a))}return{}},this.saveToken=function(t){e.localStorage.jwtToken=t},this.getToken=function(){return e.localStorage.jwtToken},this.isAuthed=function(){var e=this.getToken();if(e){var t=this.parseJwt(e),n=Math.round((new Date).getTime()/1e3)<=t.exp;return n||this.logout(),n}return!1},this.logout=function(){delete e.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.factory("authInterceptor",["$q","$location","authService",function(e,t,n){return{request:function(e){return e.headers=e.headers||{},n.isAuthed()&&(e.headers.Authorization="Bearer "+n.getToken()),e},response:function(a){return t.search().access_token&&(n.saveToken(t.search().access_token),t.search("access_token",void 0),t.path("/")),401===a.status&&t.path("/login"),a||e.when(a)},responseError:function(n){return 401===n.status&&t.path("/login"),e.reject(n)}}}]),app.factory("questionnaire",function(){return{questions:[{question:"What language(s) do you speak?",type:"list",answerOptions:["Adyghe","Albanian","Aragonese","Armenian","Aromanian","Arpitan","Asturian","Avar","Azerbaijani","Bashkir","Basque","Belarusian","Bosnian","Breton","Bulgarian","Catalan","Chechen","Chuvash","Cornish","Corsican","Crimean","Croatian","Czech","Danish","Dutch","English","Erzya","Estonian","Faroese","Finnish","French","Frisian","Gagauz","Galician","Gallo","Georgian","German","Greek","Hungarian","Icelandic","Ingrian","Irish","Italian","Kabardian","Kashubian","Kazakh","Ladin","Latin","Latvian","Laz","Lithuanian","Luxembourgish","Macedonian","Maltese","Manx","Mari","Mingrelian","Mirandese","Montenegrin","Norwegian","Occitan","Ossetian","Picard","Polish","Portuguese","Romani","Romanian","Romansh","Russian","Sami","Sardinian","Scots","Scottish","Gaelic","Serbian","Silesian","Slovak","Slovene","Sorbian","Spanish","Svan","Swedish","Tabasaran","Tatar","Turkish","Ukrainian","Vepsian","VÃµro","Walloon","Welsh","Wymysorys"]},{question:"What field do you work in?",type:"list",answerOptions:["Agriculture","Industry","Services"]},{question:"What climate(s) would you prefer?",type:"list",answerOptions:["Temperate","Mediterranean","Tropical","Arid","Desert","Maritime","Wet"]},{question:"What is the ideal size for the largest metropolitan area?",type:"list",answerOptions:["Small (<100,000)","Medium (100,000-1 million)","Large (>1 million)"]},{question:"Would you like the population distribution to be mostly urban?",type:"boolean"},{question:"What would your ideal median age range be?",type:"list",answerOptions:["20-30yrs","30-40yrs","40+years"]},{question:"What cost of living should your destination have?",type:"list",answerOptions:["High","Average","Low"]},{question:"What percentage of the population should be internet users?",type:"list",answerOptions:["<25%","25%-50%","50%-75%",">75%"]}],determineRecommendations:function(e,t){function n(e,t,n){if(n>=e&&t>=n)return 10;var a=Math.abs(n-e)>Math.abs(n-t)?t:e,o=n>a?.5:1.5,r=20*(1-Math.min(1,Math.abs(n-o*a)/a));return r}return countries=[],t.forEach(function(t,a){var o,r,i,s=0,u=t.labor[e.question2]||0,l=u/7.5>10?10:u/10;i="array"==typeof e.question3?new RegExp(e.question3.join("|"),"i"):new RegExp(e.question3,"i");var c=null!=t.climate.match(i)?10:0,p=e.question4;switch(p){case"Small (<100,000)":r=0,o=1e5;break;case"Medium (100,000-1 million)":r=1e5,o=1e6;break;case"Large (>1 million)":r=1e6,o=1e20}var h,m=n(r,o,t.largestCityPop)||0,g=e.question5;h=g?t.urbanPopulation>50?10:10*t.urbanPopulation/50:t.urbanPopulation<50?10:500/t.urbanPopulation;var d=e.question6;switch(d){case"20-30yrs":r=0,o=30;break;case"30-40yrs":r=30,o=40;break;case"40+years":r=40,o=150}var f=n(r,o,t.medianAge),y=e.question7;switch(y){case"High":r=6e4,o=1e10;break;case"Average":r=3e4,o=6e4;break;case"Low":r=0,o=3e4}var w=n(r,o,t.perCapitaPPP),v=e.question8;switch(v){case"<25%":r=0,o=25;break;case"25%-50%":r=25,o=50;break;case"50%-75%":r=50,o=75;break;default:r=75,o=100}var b=n(r,o,t.internetUsagePerCapita);s=s+l+c+m+h+w+f+b,t.score=s,countries.push(t)}),countries.sort(function(e,t){return e.score>t.score?-1:e.score<t.score?1:e.countryName>t.countryName?1:e.countryName<t.countryName?-1:0}),countries.slice(0,4)}}}),app.factory("countryPage",function(){return{}}),app.factory("userRecommendations",function(){return{}}),app.factory("sharedService",["$rootScope",function(e){var t={};return t.values={},t.worldBankDataUpdate=function(){e.$broadcast("update")},t}]);
//# sourceMappingURL=data:application/json;base64,