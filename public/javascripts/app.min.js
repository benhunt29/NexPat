var app=angular.module("NextPat",["ngRoute"]);app.config(["$routeProvider","$locationProvider",function(e,t){t.html5Mode(!0),e.when("/",{templateUrl:"/views/home.html",controller:"mainController"}).when("/about",{templateUrl:"/views/about.html",controller:"aboutController"}).when("/contact",{templateUrl:"/views/contact.html",controller:"contactController"}).when("/login",{templateUrl:"/views/login.html",controller:"loginController"}).when("/signUp",{templateUrl:"/views/signUp.html",controller:"loginController"}).when("/questionnaire",{templateUrl:"/views/questionnaire.html",controller:"questionnaireController"}).when("/help",{templateUrl:"/views/help.html",controller:"helpController"}).when("/country",{templateUrl:"/views/country.html",controller:"countryController"}).otherwise({redirectTo:"/"})}]),app.controller("mainController",["$scope","$location",function(e,t){var n=[{question:"Have you been here before?",route:"login"},{question:"Would you like to sign up?",route:"signUp"},{question:"Okay, your information will not be saved."}];e.question=n[0].question;var o=0;e.showButtons=!0,e.getQuestion=function(a){var r=(n[o].question,n[o].route);a?t.path(r):(o++,e.question=n[o].question,o==n.length-1&&(e.showButtons=!1))}}]),app.controller("aboutController",["$scope",function(e){e.message="I'm a page that describes this application!"}]),app.controller("contactController",["$scope",function(e){e.message="I'm a page that tells you how to yell (by writing an all-caps email) at the developer!"}]),app.controller("signUpController",["$scope","$http",function(e,t){}]),app.controller("countryController",["countryPage","$scope","$http",function(e,t,n){t.countryName=e.name,console.log(t.nationMasterLink)}]),app.controller("loginController",["$scope","$http","authService","$location","$rootScope",function(e,t,n,o,a){e.submit=function(){t.post("api/login",e.form).then(function(e){n.saveToken(e.data),a.user=n.getUser(),o.path("/questionnaire")})}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location","$http",function(e,t,n,o,a){n.user=e.getUser(),n.user&&n.user.username&&o.path("/questionnaire"),t.logout=function(){a.get("/api/questionnaire/"+n.user.username),a.get("/api/logout").then(function(e){console.log(e)}),e.logout(),n.user=e.getUser(),o.path("/login")}}]),app.controller("helpController",["$scope",function(e){e.message="I'm a help page that currently doesn't help at all"}]),app.controller("questionnaireController",["countryPage","questionnaire","$rootScope","$scope","$location","$http",function(e,t,n,o,a,r){var i=t.questions,s={},l={},u=0;o.data={answer:""},r.get("/api/questionnaire/"+n.user.username).then(function(e){"object"==typeof e.data?r.post("/api/worldFactbook",{languageOption:!0,language:e.data.question1}).then(function(n){o.recommendations=t.determineRecommendations(e.data,n.data)}):o.getQuestion()}),o.getQuestion=function(){u==i.length?(u++,s["question"+(u-1)]=o.data.answer,o.question="Your list is being generated!",l.username=n.user.username,l.questionResponses=s,r.post("/api/questionnaire",l),r.post("/api/worldFactbook",{languageOption:!0,language:s.question1}).then(function(e){o.recommendations=t.determineRecommendations(s,e.data)}),o.type=""):(o.question=i[u].question,o.type=i[u].type,"list"==o.type&&(o.list=i[u].answerOptions),u++)},o.logAnswer=function(){s["question"+(u-1)]=o.data.answer},o.addCountry=function(){r.post("/api/userCountries",{username:n.user.username,userCountries:["france","germany","spain"]}).then(function(e){o.userCountries=e.userCountries})},o.setCountryPage=function(t){e.name=t}}]),app.service("authService",["$window",function(e){this.parseJwt=function(t){if(t){var n=t.split(".")[1],o=n.replace("-","+").replace("_","/");return JSON.parse(e.atob(o))}return{}},this.saveToken=function(t){e.localStorage.jwtToken=t,console.log("Saved token:",e.localStorage.jwtToken)},this.getToken=function(){return e.localStorage.jwtToken},this.isAuthed=function(){var e=this.getToken();if(e){var t=this.parseJwt(e),n=Math.round((new Date).getTime()/1e3)<=t.exp;return n||this.logout(),n}return!1},this.logout=function(){delete e.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.factory("authInterceptor",["$q","$location","authService",function(e,t,n){return{request:function(e){return e.headers=e.headers||{},n.isAuthed()&&(e.headers.Authorization="Bearer "+n.getToken()),e},response:function(n){return 401===n.status&&t.path("/login"),n||e.when(n)},responseError:function(n){return 401===n.status?t.path("/login"):console.log(n),e.reject(n)}}}]),app.factory("questionnaire",function(){return{questions:[{question:"What language(s) do you speak?",type:"list",answerOptions:["Adyghe","Albanian","Aragonese","Armenian","Aromanian","Arpitan","Asturian","Avar","Azerbaijani","Bashkir","Basque","Belarusian","Bosnian","Breton","Bulgarian","Catalan","Chechen","Chuvash","Cornish","Corsican","Crimean","Croatian","Czech","Danish","Dutch","English","Erzya","Estonian","Faroese","Finnish","French","Frisian","Gagauz","Galician","Gallo","Georgian","German","Greek","Hungarian","Icelandic","Ingrian","Irish","Italian","Kabardian","Kashubian","Kazakh","Ladin","Latin","Latvian","Laz","Lithuanian","Luxembourgish","Macedonian","Maltese","Manx","Mari","Mingrelian","Mirandese","Montenegrin","Norwegian","Occitan","Ossetian","Picard","Polish","Portuguese","Romani","Romanian","Romansh","Russian","Sami","Sardinian","Scots","Scottish","Gaelic","Serbian","Silesian","Slovak","Slovene","Sorbian","Spanish","Svan","Swedish","Tabasaran","Tatar","Turkish","Ukrainian","Vepsian","VÃµro","Walloon","Welsh","Wymysorys"]},{question:"What field do you work in?",type:"list",answerOptions:["Agriculture","Industry","Services"]},{question:"What climate(s) would you prefer?",type:"list",answerOptions:["Temperate","Mediterranean","Tropical","Arid","Desert","Maritime","Wet"]},{question:"What is the ideal size for the largest metropolitan area?",type:"list",answerOptions:["Small (<100,000)","Medium (100,000-1 million)","Large (>1 million)"]},{question:"Would you like the population distribution to be mostly urban?",type:"boolean"},{question:"What would your ideal median age range be?",type:"list",answerOptions:["20-30yrs","30-40yrs","40+years"]},{question:"What cost of living should your destination have?",type:"list",answerOptions:["High","Average","Low"]},{question:"What percentage of the population should be internet users?",type:"list",answerOptions:["<25%","25%-50%","50%-75%",">75%"]}],determineRecommendations:function(e,t){function n(e,t,n){if(console.log("value",n),console.log(t,e),n>=e&&t>=n)return 10;var o=Math.abs(n-e)>Math.abs(n-t)?t:e,a=n>o?.5:1.5,r=20*(1-Math.min(1,Math.abs(n-a*o)/o));return console.log(r),r}return countries=[],t.forEach(function(t,o){var a,r,i,s=0,l=t.labor[e.question2]||0,u=l/7.5>10?10:l/10;i="array"==typeof e.question3?new RegExp(e.question3.join("|"),"i"):new RegExp(e.question3,"i");var c=null!=t.climate.match(i)?10:0,p=e.question4;switch(console.log(p),p){case"Small (<100,000)":r=0,a=1e5;break;case"Medium (100,000-1 million)":r=1e5,a=1e6;break;case"Large (>1 million)":r=1e6,a=1e20}console.log(t.countryName);var h,g=n(r,a,t.largestCityPop)||0,m=e.question5;h=m?t.urbanPopulation>50?10:10*t.urbanPopulation/50:t.urbanPopulation<50?10:500/t.urbanPopulation;var d=e.question6;switch(d){case"20-30yrs":r=0,a=30;break;case"30-40yrs":r=30,a=40;break;case"40+years":r=40,a=150}var y=n(r,a,t.medianAge),f=e.question7;switch(f){case"High":r=6e4,a=1e10;break;case"Average":r=3e4,a=6e4;break;case"Low":r=0,a=3e4}var w=n(r,a,t.perCapitaPPP),v=e.question8;switch(v){case"<25%":r=0,a=25;break;case"25%-50%":r=25,a=50;break;case"50%-75%":r=50,a=75;break;default:r=75,a=100}var q=n(r,a,t.internetUsagePerCapita);console.log("laborScore",u,"climateScore",c,"largestCityPopScore",g,"urbanPopulationScore",h,"perCapitaPPPScore",w,"medianAgeScore",y,"internetUsageScore",q),s=s+u+c+g+h+w+y+q,t.score=s,countries.push(t)}),countries.sort(function(e,t){return e.score>t.score?-1:e.score<t.score?1:e.countryName>t.countryName?1:e.countryName<t.countryName?-1:0}),countries.slice(0,4)}}}),app.factory("countryPage",function(){return{}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsImh0bWw1TW9kZSIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiJHNjb3BlIiwiJGxvY2F0aW9uIiwiaW50cm9RdWVzdGlvbnMiLCJxdWVzdGlvbiIsInJvdXRlIiwicXVlc3Rpb25OdW0iLCJzaG93QnV0dG9ucyIsImdldFF1ZXN0aW9uIiwiYW5zd2VyIiwicGF0aCIsImxlbmd0aCIsIm1lc3NhZ2UiLCIkaHR0cCIsImNvdW50cnlQYWdlIiwiY291bnRyeU5hbWUiLCJuYW1lIiwiY29uc29sZSIsImxvZyIsIm5hdGlvbk1hc3RlckxpbmsiLCJhdXRoU2VydmljZSIsIiRyb290U2NvcGUiLCJzdWJtaXQiLCJwb3N0IiwiZm9ybSIsInRoZW4iLCJyZXNwb25zZSIsInNhdmVUb2tlbiIsImRhdGEiLCJ1c2VyIiwiZ2V0VXNlciIsInVzZXJuYW1lIiwibG9nb3V0IiwiZ2V0IiwicXVlc3Rpb25uYWlyZSIsInF1ZXN0aW9ucyIsInF1ZXN0aW9uUmVzcG9uc2VzIiwidXNlclF1ZXN0aW9ubmFpcmUiLCJ1c2VyQW5zd2VycyIsImxhbmd1YWdlT3B0aW9uIiwibGFuZ3VhZ2UiLCJxdWVzdGlvbjEiLCJjb3VudHJpZXNUb1NlYXJjaCIsInJlY29tbWVuZGF0aW9ucyIsImRldGVybWluZVJlY29tbWVuZGF0aW9ucyIsInR5cGUiLCJsaXN0IiwiYW5zd2VyT3B0aW9ucyIsImxvZ0Fuc3dlciIsImFkZENvdW50cnkiLCJ1c2VyQ291bnRyaWVzIiwic2V0Q291bnRyeVBhZ2UiLCJzZXJ2aWNlIiwiJHdpbmRvdyIsInRoaXMiLCJwYXJzZUp3dCIsInRva2VuIiwiYmFzZTY0VXJsIiwic3BsaXQiLCJiYXNlNjQiLCJyZXBsYWNlIiwiSlNPTiIsInBhcnNlIiwiYXRvYiIsImxvY2FsU3RvcmFnZSIsImp3dFRva2VuIiwiZ2V0VG9rZW4iLCJpc0F1dGhlZCIsInBhcmFtcyIsIm5vdEV4cGlyZWQiLCJNYXRoIiwicm91bmQiLCJEYXRlIiwiZ2V0VGltZSIsImV4cCIsImZhY3RvcnkiLCIkcSIsInJlcXVlc3QiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsInN0YXR1cyIsInJlc3BvbnNlRXJyb3IiLCJyZWplY3QiLCJxdWVzdGlvbm5haXJlQW5zd2VycyIsImdldFByb3BvcnRpb25hbFNjb3JlIiwibG93ZXJMaW1pdCIsInVwcGVyTGltaXQiLCJ2YWx1ZSIsImxpbWl0IiwiYWJzIiwibXVsdGlwbGllciIsInNjb3JlIiwibWluIiwiY291bnRyaWVzIiwiZm9yRWFjaCIsImNvdW50cnkiLCJpbmRleCIsImNsaW1hdGVTdHJpbmciLCJsYWJvclBlcmNlbnQiLCJsYWJvciIsInF1ZXN0aW9uMiIsImxhYm9yU2NvcmUiLCJxdWVzdGlvbjMiLCJSZWdFeHAiLCJqb2luIiwiY2xpbWF0ZVNjb3JlIiwiY2xpbWF0ZSIsIm1hdGNoIiwidXNlckxhcmdlc3RDaXR5UG9wIiwicXVlc3Rpb240IiwidXJiYW5Qb3B1bGF0aW9uU2NvcmUiLCJsYXJnZXN0Q2l0eVBvcFNjb3JlIiwibGFyZ2VzdENpdHlQb3AiLCJ1c2VyVXJiYW5Qb3B1bGF0aW9uIiwicXVlc3Rpb241IiwidXJiYW5Qb3B1bGF0aW9uIiwidXNlck1lZGlhbkFnZSIsInF1ZXN0aW9uNiIsIm1lZGlhbkFnZVNjb3JlIiwibWVkaWFuQWdlIiwidXNlclBlckNhcGl0YVBQUCIsInF1ZXN0aW9uNyIsInBlckNhcGl0YVBQUFNjb3JlIiwicGVyQ2FwaXRhUFBQIiwidXNlckludGVybmV0VXNhZ2VQZXJDYXBpdGEiLCJxdWVzdGlvbjgiLCJpbnRlcm5ldFVzYWdlU2NvcmUiLCJpbnRlcm5ldFVzYWdlUGVyQ2FwaXRhIiwicHVzaCIsInNvcnQiLCJhIiwiYiIsInNsaWNlIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxL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QXZDLE1BQUF3QyxFQUFBeEMsTUFDQSxFQUVBdUMsRUFBQW5ILFlBQUFvSCxFQUFBcEgsWUFDQSxFQUVBbUgsRUFBQW5ILFlBQUFvSCxFQUFBcEgsWUFDQSxHQUVBLElBR0E4RSxVQUFBdUMsTUFBQSxFQUFBLE9BS0EvSSxJQUFBc0YsUUFBQSxjQUFBLFdBQ0EiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnTmV4dFBhdCcsIFsnbmdSb3V0ZSddKTtcblxuYXBwLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJywnJGxvY2F0aW9uUHJvdmlkZXInLCBmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpe1xuXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuXG4gICAgJHJvdXRlUHJvdmlkZXIud2hlbignLycsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL2hvbWUuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICAgIH0pLndoZW4oJy9hYm91dCcsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL2Fib3V0Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2Fib3V0Q29udHJvbGxlcidcbiAgICAgICAgfSkud2hlbignL2NvbnRhY3QnLFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9jb250YWN0Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2NvbnRhY3RDb250cm9sbGVyJ1xuICAgICAgICB9KS53aGVuKCcvbG9naW4nLFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9sb2dpbi5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdsb2dpbkNvbnRyb2xsZXInXG4gICAgICAgIH0pLndoZW4oJy9zaWduVXAnLFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9zaWduVXAuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnbG9naW5Db250cm9sbGVyJ1xuICAgICAgICB9KS53aGVuKCcvcXVlc3Rpb25uYWlyZScsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL3F1ZXN0aW9ubmFpcmUuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAncXVlc3Rpb25uYWlyZUNvbnRyb2xsZXInXG4gICAgICAgIH0pLndoZW4oJy9oZWxwJyxcbiAgICAgICAge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3MvaGVscC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdoZWxwQ29udHJvbGxlcidcbiAgICAgICAgfSkud2hlbignL2NvdW50cnknLFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9jb3VudHJ5Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2NvdW50cnlDb250cm9sbGVyJ1xuICAgICAgICB9KS5vdGhlcndpc2Uoe1xuICAgICAgICByZWRpcmVjdFRvOiAnLydcbiAgICB9KTtcbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ21haW5Db250cm9sbGVyJywgWyckc2NvcGUnLCckbG9jYXRpb24nLCBmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uKXtcblxuICAgIHZhciBpbnRyb1F1ZXN0aW9ucyA9IFt7cXVlc3Rpb246IFwiSGF2ZSB5b3UgYmVlbiBoZXJlIGJlZm9yZT9cIiwgcm91dGU6J2xvZ2luJ30sXG4gICAgICAgIHtxdWVzdGlvbjogXCJXb3VsZCB5b3UgbGlrZSB0byBzaWduIHVwP1wiLCByb3V0ZTogJ3NpZ25VcCd9LFxuICAgICAgICB7cXVlc3Rpb246IFwiT2theSwgeW91ciBpbmZvcm1hdGlvbiB3aWxsIG5vdCBiZSBzYXZlZC5cIn1dO1xuICAgICRzY29wZS5xdWVzdGlvbiA9IGludHJvUXVlc3Rpb25zWzBdLnF1ZXN0aW9uO1xuICAgIHZhciBxdWVzdGlvbk51bSA9IDA7XG4gICAgJHNjb3BlLnNob3dCdXR0b25zID0gdHJ1ZTtcbiAgICAkc2NvcGUuZ2V0UXVlc3Rpb24gPSBmdW5jdGlvbihhbnN3ZXIpIHtcbiAgICAgICAgdmFyIHF1ZXN0aW9uVGV4dCA9IGludHJvUXVlc3Rpb25zW3F1ZXN0aW9uTnVtXS5xdWVzdGlvbjtcbiAgICAgICAgdmFyIHJvdXRlID0gaW50cm9RdWVzdGlvbnNbcXVlc3Rpb25OdW1dLnJvdXRlO1xuICAgICAgICBpZiAoYW5zd2VyKSB7XG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aChyb3V0ZSk7XG4gICAgICAgIH0gZWxzZXtcbiAgICAgICAgICAgIHF1ZXN0aW9uTnVtKys7XG4gICAgICAgICAgICAkc2NvcGUucXVlc3Rpb24gPSBpbnRyb1F1ZXN0aW9uc1txdWVzdGlvbk51bV0ucXVlc3Rpb247XG4gICAgICAgICAgICBpZihxdWVzdGlvbk51bSA9PSBpbnRyb1F1ZXN0aW9ucy5sZW5ndGgtMSl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dCdXR0b25zID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufV0pO1xuXG5hcHAuY29udHJvbGxlcignYWJvdXRDb250cm9sbGVyJywgWyckc2NvcGUnLGZ1bmN0aW9uKCRzY29wZSl7XG4gICAgJHNjb3BlLm1lc3NhZ2UgPSBcIkknbSBhIHBhZ2UgdGhhdCBkZXNjcmliZXMgdGhpcyBhcHBsaWNhdGlvbiFcIjtcbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ2NvbnRhY3RDb250cm9sbGVyJyxbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSl7XG4gICAgJHNjb3BlLm1lc3NhZ2UgPSBcIkknbSBhIHBhZ2UgdGhhdCB0ZWxscyB5b3UgaG93IHRvIHllbGwgKGJ5IHdyaXRpbmcgYW4gYWxsLWNhcHMgZW1haWwpIGF0IHRoZSBkZXZlbG9wZXIhXCI7XG59XSk7XG5cbmFwcC5jb250cm9sbGVyKCdzaWduVXBDb250cm9sbGVyJyxbJyRzY29wZScsJyRodHRwJywgZnVuY3Rpb24oJHNjb3BlLCRodHRwKXtcbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ2NvdW50cnlDb250cm9sbGVyJywgWydjb3VudHJ5UGFnZScsJyRzY29wZScsJyRodHRwJywgZnVuY3Rpb24oY291bnRyeVBhZ2UsJHNjb3BlLCRodHRwKXtcbiAgICAkc2NvcGUuY291bnRyeU5hbWUgPSBjb3VudHJ5UGFnZS5uYW1lO1xuICAgIGNvbnNvbGUubG9nKCRzY29wZS5uYXRpb25NYXN0ZXJMaW5rKTtcbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ2xvZ2luQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRodHRwJywgJ2F1dGhTZXJ2aWNlJywgJyRsb2NhdGlvbicsICckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgYXV0aFNlcnZpY2UsICRsb2NhdGlvbiwgJHJvb3RTY29wZSl7XG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICRodHRwLnBvc3QoJ2FwaS9sb2dpbicsICRzY29wZS5mb3JtKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgYXV0aFNlcnZpY2Uuc2F2ZVRva2VuKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUudXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9xdWVzdGlvbm5haXJlXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ25hdkN0cmwnLCBbJ2F1dGhTZXJ2aWNlJywnJHNjb3BlJywnJHJvb3RTY29wZScsJyRsb2NhdGlvbicsJyRodHRwJywgZnVuY3Rpb24oYXV0aFNlcnZpY2UsICRzY29wZSwkcm9vdFNjb3BlLCAkbG9jYXRpb24sJGh0dHApe1xuICAgICRyb290U2NvcGUudXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcblxuICAgIGlmKCRyb290U2NvcGUudXNlciAmJiAkcm9vdFNjb3BlLnVzZXIudXNlcm5hbWUpe1xuICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3F1ZXN0aW9ubmFpcmUnKTtcbiAgICB9XG5cbiAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL3F1ZXN0aW9ubmFpcmUvJyskcm9vdFNjb3BlLnVzZXIudXNlcm5hbWUpO1xuICAgICAgICAkaHR0cC5nZXQoJy9hcGkvbG9nb3V0JykuXG4gICAgICAgICAgICB0aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgYXV0aFNlcnZpY2UubG9nb3V0KCk7XG4gICAgICAgICRyb290U2NvcGUudXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvbG9naW5cIik7XG4gICAgfVxufV0pO1xuXG5hcHAuY29udHJvbGxlcignaGVscENvbnRyb2xsZXInLFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKXtcbiAgICAkc2NvcGUubWVzc2FnZSA9IFwiSSdtIGEgaGVscCBwYWdlIHRoYXQgY3VycmVudGx5IGRvZXNuJ3QgaGVscCBhdCBhbGxcIjtcbn1dKTtcblxuYXBwLmNvbnRyb2xsZXIoJ3F1ZXN0aW9ubmFpcmVDb250cm9sbGVyJyxbJ2NvdW50cnlQYWdlJywncXVlc3Rpb25uYWlyZScsJyRyb290U2NvcGUnLCckc2NvcGUnLCckbG9jYXRpb24nLCAnJGh0dHAnLCBmdW5jdGlvbihjb3VudHJ5UGFnZSxxdWVzdGlvbm5haXJlLCRyb290U2NvcGUsJHNjb3BlLCRsb2NhdGlvbiwkaHR0cCl7XG5cblxuXG4gICAgdmFyIHF1ZXN0aW9ucyA9IHF1ZXN0aW9ubmFpcmUucXVlc3Rpb25zO1xuICAgIHZhciBxdWVzdGlvblJlc3BvbnNlcyA9IHt9O1xuICAgIHZhciB1c2VyUXVlc3Rpb25uYWlyZSA9IHt9O1xuICAgIHZhciByZWNvbW1lbmRhdGlvbnM7XG4gICAgdmFyIHF1ZXN0aW9uTnVtID0gMDtcbiAgICAkc2NvcGUuZGF0YSA9IHtcbiAgICAgICAgYW5zd2VyOiAnJ1xuICAgICAgICB9O1xuXG4gICAgJGh0dHAuZ2V0KCcvYXBpL3F1ZXN0aW9ubmFpcmUvJyskcm9vdFNjb3BlLnVzZXIudXNlcm5hbWUpLlxuICAgICAgICB0aGVuKGZ1bmN0aW9uKHVzZXJBbnN3ZXJzKXtcbiAgICAgICAgICAgIGlmKHR5cGVvZiB1c2VyQW5zd2Vycy5kYXRhID09ICdvYmplY3QnKXtcbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3dvcmxkRmFjdGJvb2snLHtsYW5ndWFnZU9wdGlvbjp0cnVlLGxhbmd1YWdlOnVzZXJBbnN3ZXJzLmRhdGEucXVlc3Rpb24xfSkuXG4gICAgICAgICAgICAgICAgICAgIHRoZW4oZnVuY3Rpb24oY291bnRyaWVzVG9TZWFyY2gpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlY29tbWVuZGF0aW9ucyA9IHF1ZXN0aW9ubmFpcmUuZGV0ZXJtaW5lUmVjb21tZW5kYXRpb25zKHVzZXJBbnN3ZXJzLmRhdGEsY291bnRyaWVzVG9TZWFyY2guZGF0YSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0UXVlc3Rpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAvLyRzY29wZS50eXBlID0gcXVlc3Rpb25zWzBdLnR5cGU7XG4gICAgLy9jb25zb2xlLmxvZyhxdWVzdGlvbnNbMF0uYW5zd2VyT3B0aW9ucyk7XG4gICAgLy8kc2NvcGUucXVlc3Rpb24gPSBxdWVzdGlvbnNbMF0ucXVlc3Rpb247XG4gICAgLy8kc2NvcGUubGlzdCA9IHF1ZXN0aW9uc1swXS5hbnN3ZXJPcHRpb25zO1xuICAgICRzY29wZS5nZXRRdWVzdGlvbiA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgaWYocXVlc3Rpb25OdW09PXF1ZXN0aW9ucy5sZW5ndGgpe1xuICAgICAgICAgICAgcXVlc3Rpb25OdW0rKztcbiAgICAgICAgICAgIHF1ZXN0aW9uUmVzcG9uc2VzW1wicXVlc3Rpb25cIisocXVlc3Rpb25OdW0tMSldID0gJHNjb3BlLmRhdGEuYW5zd2VyO1xuICAgICAgICAgICAgJHNjb3BlLnF1ZXN0aW9uID0gJ1lvdXIgbGlzdCBpcyBiZWluZyBnZW5lcmF0ZWQhJztcbiAgICAgICAgICAgIHVzZXJRdWVzdGlvbm5haXJlLnVzZXJuYW1lID0gJHJvb3RTY29wZS51c2VyLnVzZXJuYW1lO1xuICAgICAgICAgICAgdXNlclF1ZXN0aW9ubmFpcmUucXVlc3Rpb25SZXNwb25zZXMgPSBxdWVzdGlvblJlc3BvbnNlcztcbiAgICAgICAgICAgICRodHRwLnBvc3QoJy9hcGkvcXVlc3Rpb25uYWlyZScsdXNlclF1ZXN0aW9ubmFpcmUpO1xuICAgICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS93b3JsZEZhY3Rib29rJyx7bGFuZ3VhZ2VPcHRpb246dHJ1ZSxsYW5ndWFnZTpxdWVzdGlvblJlc3BvbnNlcy5xdWVzdGlvbjF9KS5cbiAgICAgICAgICAgICAgICB0aGVuKGZ1bmN0aW9uKGNvdW50cmllc1RvU2VhcmNoKXtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlY29tbWVuZGF0aW9ucyA9IHF1ZXN0aW9ubmFpcmUuZGV0ZXJtaW5lUmVjb21tZW5kYXRpb25zKHF1ZXN0aW9uUmVzcG9uc2VzLGNvdW50cmllc1RvU2VhcmNoLmRhdGEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJHNjb3BlLnR5cGUgPSAnJztcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAkc2NvcGUucXVlc3Rpb24gPSBxdWVzdGlvbnNbcXVlc3Rpb25OdW1dLnF1ZXN0aW9uO1xuICAgICAgICAgICAgJHNjb3BlLnR5cGUgPSBxdWVzdGlvbnNbcXVlc3Rpb25OdW1dLnR5cGU7XG5cbiAgICAgICAgICAgIGlmKCRzY29wZS50eXBlID09ICdsaXN0Jyl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QgPSBxdWVzdGlvbnNbcXVlc3Rpb25OdW1dLmFuc3dlck9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWVzdGlvbk51bSsrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAkc2NvcGUubG9nQW5zd2VyID0gZnVuY3Rpb24oKXtcbiAgICAgICAgcXVlc3Rpb25SZXNwb25zZXNbXCJxdWVzdGlvblwiKyhxdWVzdGlvbk51bS0xKV0gPSAkc2NvcGUuZGF0YS5hbnN3ZXI7XG4gICAgfTtcblxuICAgICRzY29wZS5hZGRDb3VudHJ5ID0gZnVuY3Rpb24oKXtcblxuICAgICAgICAvL2NvbnNvbGUubG9nKCRyb290U2NvcGUudXNlcm5hbWUpO1xuICAgICAgICAvLyRodHRwLnBvc3QoJy9hcGkvdXNlckNvdW50cmllcycse3VzZXJuYW1lOiAkcm9vdFNjb3BlLnVzZXIudXNlcm5hbWV9KS5cbiAgICAgICAgLy8gICAgdGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgIC8vICAgICAgICAkc2NvcGUudXNlckNvdW50cmllcyA9IHJlc3BvbnNlLnVzZXJDb3VudHJpZXM7XG4gICAgICAgIC8vICAgIH0pO1xuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3VzZXJDb3VudHJpZXMnLHt1c2VybmFtZTogJHJvb3RTY29wZS51c2VyLnVzZXJuYW1lLHVzZXJDb3VudHJpZXM6IFsnZnJhbmNlJywnZ2VybWFueScsJ3NwYWluJ119KS5cbiAgICAgICAgICAgIHRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgICRzY29wZS51c2VyQ291bnRyaWVzID0gcmVzcG9uc2UudXNlckNvdW50cmllcztcbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgJHNjb3BlLnNldENvdW50cnlQYWdlID0gZnVuY3Rpb24oY291bnRyeU5hbWUpe1xuICAgICAgICBjb3VudHJ5UGFnZS5uYW1lID0gY291bnRyeU5hbWU7XG4gICAgfVxuXG59XSk7XG5cbmFwcC5zZXJ2aWNlKCdhdXRoU2VydmljZScsIFsnJHdpbmRvdycsIGZ1bmN0aW9uICgkd2luZG93KSB7XG4gICAgdGhpcy5wYXJzZUp3dCA9IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIHZhciBiYXNlNjRVcmwgPSB0b2tlbi5zcGxpdCgnLicpWzFdO1xuICAgICAgICAgICAgdmFyIGJhc2U2NCA9IGJhc2U2NFVybC5yZXBsYWNlKCctJywgJysnKS5yZXBsYWNlKCdfJywgJy8nKTtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKCR3aW5kb3cuYXRvYihiYXNlNjQpKTtcbiAgICAgICAgfSBlbHNlIHJldHVybiB7fTtcbiAgICB9O1xuXG4gICAgdGhpcy5zYXZlVG9rZW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW4gPSB0b2tlbjtcbiAgICAgICAgY29uc29sZS5sb2coJ1NhdmVkIHRva2VuOicsJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW4pO1xuICAgIH07XG5cbiAgICB0aGlzLmdldFRva2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW47XG4gICAgfTtcblxuICAgIHRoaXMuaXNBdXRoZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHRoaXMuZ2V0VG9rZW4oKTtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5wYXJzZUp3dCh0b2tlbik7XG4gICAgICAgICAgICB2YXIgbm90RXhwaXJlZCA9IE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSA8PSBwYXJhbXMuZXhwO1xuICAgICAgICAgICAgaWYgKCFub3RFeHBpcmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dvdXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub3RFeHBpcmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWxldGUgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW47XG4gICAgfTtcblxuICAgIC8vIGV4cG9zZSB1c2VyIGFzIGFuIG9iamVjdFxuICAgIHRoaXMuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VKd3QodGhpcy5nZXRUb2tlbigpKVxuICAgIH07XG59XSk7XG5cbmFwcC5mYWN0b3J5KCdhdXRoSW50ZXJjZXB0b3InLCBbJyRxJywgJyRsb2NhdGlvbicsICdhdXRoU2VydmljZScsIGZ1bmN0aW9uICgkcSwgJGxvY2F0aW9uLCBhdXRoU2VydmljZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVlc3Q6IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG4gICAgICAgICAgICBpZiAoYXV0aFNlcnZpY2UuaXNBdXRoZWQoKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmVhcmVyICcgKyBhdXRoU2VydmljZS5nZXRUb2tlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcblxuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgdXNlciBpcyBub3QgYXV0aGVudGljYXRlZFxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2xvZ2luXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlIHx8ICRxLndoZW4ocmVzcG9uc2UpO1xuICAgICAgICB9LCByZXNwb25zZUVycm9yOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2xvZ2luXCIpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgfTtcbn1dKTtcblxuYXBwLmZhY3RvcnkoJ3F1ZXN0aW9ubmFpcmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcXVlc3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246IFwiV2hhdCBsYW5ndWFnZShzKSBkbyB5b3Ugc3BlYWs/XCIsIHR5cGU6ICdsaXN0JyxcbiAgICAgICAgICAgICAgICBhbnN3ZXJPcHRpb25zOiBbJ0FkeWdoZScsICdBbGJhbmlhbicsICdBcmFnb25lc2UnLCAnQXJtZW5pYW4nLCAnQXJvbWFuaWFuJywgJ0FycGl0YW4nLCAnQXN0dXJpYW4nLCAnQXZhcicsICdBemVyYmFpamFuaScsICdCYXNoa2lyJywgJ0Jhc3F1ZScsICdCZWxhcnVzaWFuJywgJ0Jvc25pYW4nLCAnQnJldG9uJywgJ0J1bGdhcmlhbicsICdDYXRhbGFuJywgJ0NoZWNoZW4nLCAnQ2h1dmFzaCcsICdDb3JuaXNoJywgJ0NvcnNpY2FuJywgJ0NyaW1lYW4nLCAnQ3JvYXRpYW4nLCAnQ3plY2gnLCAnRGFuaXNoJywgJ0R1dGNoJywgJ0VuZ2xpc2gnLCAnRXJ6eWEnLCAnRXN0b25pYW4nLCAnRmFyb2VzZScsICdGaW5uaXNoJywgJ0ZyZW5jaCcsICdGcmlzaWFuJywgJ0dhZ2F1eicsICdHYWxpY2lhbicsICdHYWxsbycsICdHZW9yZ2lhbicsICdHZXJtYW4nLCAnR3JlZWsnLCAnSHVuZ2FyaWFuJywgJ0ljZWxhbmRpYycsICdJbmdyaWFuJywgJ0lyaXNoJywgJ0l0YWxpYW4nLCAnS2FiYXJkaWFuJywgJ0thc2h1YmlhbicsICdLYXpha2gnLCAnTGFkaW4nLCAnTGF0aW4nLCAnTGF0dmlhbicsICdMYXonLCAnTGl0aHVhbmlhbicsICdMdXhlbWJvdXJnaXNoJywgJ01hY2Vkb25pYW4nLCAnTWFsdGVzZScsICdNYW54JywgJ01hcmknLCAnTWluZ3JlbGlhbicsICdNaXJhbmRlc2UnLCAnTW9udGVuZWdyaW4nLCAnTm9yd2VnaWFuJywgJ09jY2l0YW4nLCAnT3NzZXRpYW4nLCAnUGljYXJkJywgJ1BvbGlzaCcsICdQb3J0dWd1ZXNlJywgJ1JvbWFuaScsICdSb21hbmlhbicsICdSb21hbnNoJywgJ1J1c3NpYW4nLCAnU2FtaScsICdTYXJkaW5pYW4nLCAnU2NvdHMnLCAnU2NvdHRpc2gnLCdHYWVsaWMnLCAnU2VyYmlhbicsICdTaWxlc2lhbicsICdTbG92YWsnLCAnU2xvdmVuZScsICdTb3JiaWFuJywgJ1NwYW5pc2gnLCAnU3ZhbicsICdTd2VkaXNoJywgJ1RhYmFzYXJhbicsICdUYXRhcicsICdUdXJraXNoJywgJ1VrcmFpbmlhbicsICdWZXBzaWFuJywgJ1bDtXJvJywgJ1dhbGxvb24nLCAnV2Vsc2gnLCAnV3lteXNvcnlzJ11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246ICdXaGF0IGZpZWxkIGRvIHlvdSB3b3JrIGluPycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGFuc3dlck9wdGlvbnM6IFsnQWdyaWN1bHR1cmUnLCAnSW5kdXN0cnknLCAnU2VydmljZXMnXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBxdWVzdGlvbjogJ1doYXQgY2xpbWF0ZShzKSB3b3VsZCB5b3UgcHJlZmVyPycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGFuc3dlck9wdGlvbnM6IFsnVGVtcGVyYXRlJywgJ01lZGl0ZXJyYW5lYW4nLCAnVHJvcGljYWwnLCAnQXJpZCcsICdEZXNlcnQnLCAnTWFyaXRpbWUnLCAnV2V0J11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246ICdXaGF0IGlzIHRoZSBpZGVhbCBzaXplIGZvciB0aGUgbGFyZ2VzdCBtZXRyb3BvbGl0YW4gYXJlYT8nLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdsaXN0JyxcbiAgICAgICAgICAgICAgICBhbnN3ZXJPcHRpb25zOiBbJ1NtYWxsICg8MTAwLDAwMCknLCAnTWVkaXVtICgxMDAsMDAwLTEgbWlsbGlvbiknLCAnTGFyZ2UgKD4xIG1pbGxpb24pJ11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246ICdXb3VsZCB5b3UgbGlrZSB0aGUgcG9wdWxhdGlvbiBkaXN0cmlidXRpb24gdG8gYmUgbW9zdGx5IHVyYmFuPycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiAnV2hhdCB3b3VsZCB5b3VyIGlkZWFsIG1lZGlhbiBhZ2UgcmFuZ2UgYmU/JywgdHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGFuc3dlck9wdGlvbnM6IFsnMjAtMzB5cnMnLCAnMzAtNDB5cnMnLCAnNDAreWVhcnMnXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBxdWVzdGlvbjogJ1doYXQgY29zdCBvZiBsaXZpbmcgc2hvdWxkIHlvdXIgZGVzdGluYXRpb24gaGF2ZT8nLCB0eXBlOidsaXN0JyxcbiAgICAgICAgICAgICAgICBhbnN3ZXJPcHRpb25zOiBbJ0hpZ2gnLCdBdmVyYWdlJywnTG93J11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246ICdXaGF0IHBlcmNlbnRhZ2Ugb2YgdGhlIHBvcHVsYXRpb24gc2hvdWxkIGJlIGludGVybmV0IHVzZXJzPycsIHR5cGU6J2xpc3QnLFxuICAgICAgICAgICAgICAgIGFuc3dlck9wdGlvbnM6IFsnPDI1JScsJzI1JS01MCUnLCc1MCUtNzUlJywnPjc1JSddXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGRldGVybWluZVJlY29tbWVuZGF0aW9uczogZnVuY3Rpb24ocXVlc3Rpb25uYWlyZUFuc3dlcnMsY291bnRyaWVzVG9TZWFyY2gpe1xuXG4gICAgICAgICAgICBjb3VudHJpZXMgPSBbXTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UHJvcG9ydGlvbmFsU2NvcmUobG93ZXJMaW1pdCx1cHBlckxpbWl0LHZhbHVlKXtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd2YWx1ZScsdmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHVwcGVyTGltaXQsbG93ZXJMaW1pdCk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID49IGxvd2VyTGltaXQgJiYgdmFsdWUgPD0gdXBwZXJMaW1pdCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxMDtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbWl0ID0gTWF0aC5hYnModmFsdWUtbG93ZXJMaW1pdCkgPiBNYXRoLmFicyh2YWx1ZS11cHBlckxpbWl0KSA/IHVwcGVyTGltaXQgOiBsb3dlckxpbWl0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgbXVsdGlwbGllciA9IHZhbHVlID4gbGltaXQgPyAwLjUgOiAxLjU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY29yZSA9IDIwKigxIC0gTWF0aC5taW4oMSxNYXRoLmFicyh2YWx1ZSAtIG11bHRpcGxpZXIqbGltaXQpL2xpbWl0KSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNjb3JlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3JlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY291bnRyaWVzVG9TZWFyY2guZm9yRWFjaChmdW5jdGlvbihjb3VudHJ5LGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjb3JlID0gMCwgdXBwZXJMaW1pdCwgbG93ZXJMaW1pdCwgY2xpbWF0ZVN0cmluZztcbiAgICAgICAgICAgICAgICB2YXIgbGFib3JQZXJjZW50ID0gY291bnRyeS5sYWJvcltxdWVzdGlvbm5haXJlQW5zd2Vycy5xdWVzdGlvbjJdIHx8IDA7XG4gICAgICAgICAgICAgICAgLy9pZiB1c2VyJ3Mgc3BlY2lmaWVkIGluZHVzdHJ5IGlzIG1vcmUgdGhhbiA3NSUgb2YgdGhlIGNvdW50cnkncyB3b3JrZm9yY2UsIHNldCBzY29yZSB0byAxMFxuICAgICAgICAgICAgICAgIHZhciBsYWJvclNjb3JlID0gbGFib3JQZXJjZW50LzcuNSA+IDEwID8gMTAgOiBsYWJvclBlcmNlbnQvMTA7XG4gICAgICAgICAgICAgICAgLy9jcmVhdGUgUmVndWxhciBFeHByZXNzaW9uIHRvIGNoZWNrIGNsaW1hdGUgc3RyaW5nIGZvciBjbGltYXRlIGFuc3dlcnNcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHF1ZXN0aW9ubmFpcmVBbnN3ZXJzLnF1ZXN0aW9uMyA9PSAnYXJyYXknKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsaW1hdGVTdHJpbmcgPSBuZXcgUmVnRXhwKHF1ZXN0aW9ubmFpcmVBbnN3ZXJzLnF1ZXN0aW9uMy5qb2luKCd8JyksJ2knKTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgY2xpbWF0ZVN0cmluZyA9IG5ldyBSZWdFeHAocXVlc3Rpb25uYWlyZUFuc3dlcnMucXVlc3Rpb24zLCdpJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vaWYgY2xpbWF0ZSBzdHJpbmcgY29udGFpbnMgb25lIG9mIHRoZSBjbGltYXRlIGFuc3dlcnMsIHNldCBzY29yZSB0byAxMFxuICAgICAgICAgICAgICAgIHZhciBjbGltYXRlU2NvcmUgPSBjb3VudHJ5LmNsaW1hdGUubWF0Y2goY2xpbWF0ZVN0cmluZykgIT0gbnVsbCA/IDEwOiAwO1xuXG5cbiAgICAgICAgICAgICAgICAvL2lmIChjb3VudHJ5LnBlckNhcGl0YVBQUCA+IGxvd2VyTGltaXQgJiYgY291bnRyeS5wZXJDYXBpdGFQUFAgPCB1cHBlckxpbWl0KXtcbiAgICAgICAgICAgICAgICAvLyAgICBwZXJDYXBpdGFQUFBTY29yZSA9IDEwO1xuICAgICAgICAgICAgICAgIC8vfWVsc2V7XG4gICAgICAgICAgICAgICAgLy8gICAgdmFyIGxvd1BlckNhcGl0YVBQUFNjb3JlID0gMSAtIE1hdGguYWJzKGNvdW50cnkucGVyQ2FwaXRhUFBQIC0gbG93ZXJMaW1pdCkvbG93ZXJMaW1pdDtcbiAgICAgICAgICAgICAgICAvLyAgICB2YXIgaGlnaFBlckNhcGl0YVBQUFNjb3JlID0gMSAtIE1hdGguYWJzKGNvdW50cnkucGVyQ2FwaXRhUFBQIC0gbG93ZXJMaW1pdCkvdXBwZXJMaW1pdDtcbiAgICAgICAgICAgICAgICAvLyAgICBwZXJDYXBpdGFQUFBTY29yZSA9IDEwKihNYXRoLm1pbihsb3dMYXJnZXN0Q2l0eVBvcFNjb3JlLGhpZ2hMYXJnZXN0Q2l0eVBvcFNjb3JlKSk7XG4gICAgICAgICAgICAgICAgLy99XG5cbiAgICAgICAgICAgICAgICB2YXIgdXNlckxhcmdlc3RDaXR5UG9wID0gcXVlc3Rpb25uYWlyZUFuc3dlcnMucXVlc3Rpb240O1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHVzZXJMYXJnZXN0Q2l0eVBvcCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHVzZXJMYXJnZXN0Q2l0eVBvcCl7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1NtYWxsICg8MTAwLDAwMCknOlxuICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJMaW1pdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cHBlckxpbWl0ID0gMUU1O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ01lZGl1bSAoMTAwLDAwMC0xIG1pbGxpb24pJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyTGltaXQgPSAxRTU7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cHBlckxpbWl0ID0gMUU2O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0xhcmdlICg+MSBtaWxsaW9uKSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlckxpbWl0ID0gMUU2O1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXJMaW1pdCA9IDFFMjA7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjb3VudHJ5LmNvdW50cnlOYW1lKTtcbiAgICAgICAgICAgICAgICB2YXIgbGFyZ2VzdENpdHlQb3BTY29yZSA9IGdldFByb3BvcnRpb25hbFNjb3JlKGxvd2VyTGltaXQsdXBwZXJMaW1pdCxjb3VudHJ5Lmxhcmdlc3RDaXR5UG9wKSB8fCAwO1xuXG4gICAgICAgICAgICAgICAgLy9pZiAoY291bnRyeS5sYXJnZXN0Q2l0eVBvcCA+IGxvd2VyTGltaXQgJiYgY291bnRyeS5sYXJnZXN0Q2l0eVBvcCA8IHVwcGVyTGltaXQpe1xuICAgICAgICAgICAgICAgIC8vICAgIGxhcmdlc3RDaXR5UG9wU2NvcmUgPSAxMDtcbiAgICAgICAgICAgICAgICAvL31lbHNle1xuICAgICAgICAgICAgICAgIC8vICAgIHZhciBsb3dMYXJnZXN0Q2l0eVBvcFNjb3JlID0gMSAtIE1hdGguYWJzKGNvdW50cnkubGFyZ2VzdENpdHlQb3AgLSBsb3dlckxpbWl0KS9sb3dlckxpbWl0O1xuICAgICAgICAgICAgICAgIC8vICAgIHZhciBoaWdoTGFyZ2VzdENpdHlQb3BTY29yZSA9IDEgLSBNYXRoLmFicyhjb3VudHJ5Lmxhcmdlc3RDaXR5UG9wLXVwcGVyTGltaXQpL3VwcGVyTGltaXQ7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAgICBsYXJnZXN0Q2l0eVBvcFNjb3JlID0gMTAqKE1hdGgubWluKGxvd0xhcmdlc3RDaXR5UG9wU2NvcmUsaGlnaExhcmdlc3RDaXR5UG9wU2NvcmUpKTtcbiAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgICAgICB2YXIgdXNlclVyYmFuUG9wdWxhdGlvbiA9IHF1ZXN0aW9ubmFpcmVBbnN3ZXJzLnF1ZXN0aW9uNTtcbiAgICAgICAgICAgICAgICB2YXIgdXJiYW5Qb3B1bGF0aW9uU2NvcmU7XG4gICAgICAgICAgICAgICAgaWYodXNlclVyYmFuUG9wdWxhdGlvbil7XG4gICAgICAgICAgICAgICAgICAgIHVyYmFuUG9wdWxhdGlvblNjb3JlID0gY291bnRyeS51cmJhblBvcHVsYXRpb24gPiA1MCA/IDEwIDogMTAqY291bnRyeS51cmJhblBvcHVsYXRpb24vNTA7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHVyYmFuUG9wdWxhdGlvblNjb3JlID0gY291bnRyeS51cmJhblBvcHVsYXRpb24gPCA1MCA/IDEwIDogMTAqNTAvY291bnRyeS51cmJhblBvcHVsYXRpb247XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHVzZXJNZWRpYW5BZ2UgPSBxdWVzdGlvbm5haXJlQW5zd2Vycy5xdWVzdGlvbjY7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHVzZXJNZWRpYW5BZ2Upe1xuICAgICAgICAgICAgICAgICAgICBjYXNlICcyMC0zMHlycyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlckxpbWl0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyTGltaXQgPSAzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICczMC00MHlycyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlckxpbWl0ID0gMzA7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cHBlckxpbWl0ID0gNDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnNDAreWVhcnMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJMaW1pdCA9IDQwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXJMaW1pdCA9IDE1MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIG1lZGlhbkFnZVNjb3JlID0gZ2V0UHJvcG9ydGlvbmFsU2NvcmUobG93ZXJMaW1pdCx1cHBlckxpbWl0LGNvdW50cnkubWVkaWFuQWdlKTtcblxuICAgICAgICAgICAgICAgIHZhciB1c2VyUGVyQ2FwaXRhUFBQID0gcXVlc3Rpb25uYWlyZUFuc3dlcnMucXVlc3Rpb243O1xuICAgICAgICAgICAgICAgIHN3aXRjaCh1c2VyUGVyQ2FwaXRhUFBQKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnSGlnaCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlckxpbWl0ID0gNjAwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cHBlckxpbWl0ID0gMUUxMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdBdmVyYWdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyTGltaXQgPSAzMDAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyTGltaXQgPSA2MDAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdMb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJMaW1pdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cHBlckxpbWl0ID0gMzAwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcGVyQ2FwaXRhUFBQU2NvcmUgPSBnZXRQcm9wb3J0aW9uYWxTY29yZShsb3dlckxpbWl0LHVwcGVyTGltaXQsY291bnRyeS5wZXJDYXBpdGFQUFApO1xuXG4gICAgICAgICAgICAgICAgdmFyIHVzZXJJbnRlcm5ldFVzYWdlUGVyQ2FwaXRhID0gcXVlc3Rpb25uYWlyZUFuc3dlcnMucXVlc3Rpb244O1xuICAgICAgICAgICAgICAgIHN3aXRjaCh1c2VySW50ZXJuZXRVc2FnZVBlckNhcGl0YSl7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzwyNSUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJMaW1pdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cHBlckxpbWl0ID0gMjU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnMjUlLTUwJSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlckxpbWl0ID0gMjU7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cHBlckxpbWl0ID0gNTA7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnNTAlLTc1JSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlckxpbWl0ID0gNTA7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cHBlckxpbWl0ID0gNzU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyTGltaXQgPSA3NTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyTGltaXQgPSAxMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJuZXRVc2FnZVNjb3JlID0gZ2V0UHJvcG9ydGlvbmFsU2NvcmUobG93ZXJMaW1pdCx1cHBlckxpbWl0LGNvdW50cnkuaW50ZXJuZXRVc2FnZVBlckNhcGl0YSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2xhYm9yU2NvcmUnLGxhYm9yU2NvcmUsJ2NsaW1hdGVTY29yZScsY2xpbWF0ZVNjb3JlLCdsYXJnZXN0Q2l0eVBvcFNjb3JlJyxsYXJnZXN0Q2l0eVBvcFNjb3JlLCd1cmJhblBvcHVsYXRpb25TY29yZScsdXJiYW5Qb3B1bGF0aW9uU2NvcmUsJ3BlckNhcGl0YVBQUFNjb3JlJyxwZXJDYXBpdGFQUFBTY29yZSwnbWVkaWFuQWdlU2NvcmUnLG1lZGlhbkFnZVNjb3JlLCdpbnRlcm5ldFVzYWdlU2NvcmUnLGludGVybmV0VXNhZ2VTY29yZSk7XG4gICAgICAgICAgICAgICAgc2NvcmUgPSBzY29yZSArIGxhYm9yU2NvcmUgKyBjbGltYXRlU2NvcmUgKyBsYXJnZXN0Q2l0eVBvcFNjb3JlICsgdXJiYW5Qb3B1bGF0aW9uU2NvcmUgKyBwZXJDYXBpdGFQUFBTY29yZSArIG1lZGlhbkFnZVNjb3JlICsgaW50ZXJuZXRVc2FnZVNjb3JlO1xuICAgICAgICAgICAgICAgIGNvdW50cnkuc2NvcmUgPSBzY29yZTtcbiAgICAgICAgICAgICAgICBjb3VudHJpZXMucHVzaChjb3VudHJ5KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb3VudHJpZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYS5zY29yZSA+IGIuc2NvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYS5zY29yZSA8IGIuc2NvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKGEuY291bnRyeU5hbWUgPiBiLmNvdW50cnlOYW1lKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKGEuY291bnRyeU5hbWUgPCBiLmNvdW50cnlOYW1lKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBjb3VudHJpZXMuc2xpY2UoMCw0KTtcbiAgICAgICAgfVxuICAgIH07XG59KTtcblxuYXBwLmZhY3RvcnkoJ2NvdW50cnlQYWdlJyxmdW5jdGlvbigpe1xuICAgIHJldHVybiB7fTtcbn0pIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9