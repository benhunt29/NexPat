var app=angular.module("NextPat",["ngRoute","ngMaterial","ngMessages","validation.match"]);app.config(["$httpProvider","$routeProvider","$locationProvider","$mdThemingProvider",function(e,t,n,o){n.html5Mode(!0),e.defaults.useXDomain=!0,delete e.defaults.headers.common["X-Requested-With"],e.interceptors.push("authInterceptor"),o.theme("default").primaryPalette("blue-grey").accentPalette("grey").warnPalette("red").backgroundPalette("blue-grey"),t.when("/",{templateUrl:"/views/home.html",controller:"homeController"}).when("/about",{templateUrl:"/views/about.html",controller:"aboutController"}).when("/contact",{templateUrl:"/views/contact.html",controller:"contactController"}).when("/login",{templateUrl:"/views/login.html",controller:"loginController"}).when("/signUp",{templateUrl:"/views/signUp.html",controller:"signUpController"}).when("/questionnaire",{templateUrl:"/views/questionnaire.html",controller:"questionnaireController"}).when("/help",{templateUrl:"/views/help.html",controller:"helpController"}).when("/country",{templateUrl:"/views/country.html",controller:"countryController"}).otherwise({redirectTo:"/"})}]),app.controller("homeController",["authService","countryPage","questionnaire","userRecommendations","$http","$rootScope","$scope","$location",function(e,t,n,o,a,r,i,s){if(r.user=e.getUser(),r.user&&r.user.username)i.recommendations||(o.countries?i.recommendations=o.countries:a.get("/api/questionnaire/"+r.user.username).then(function(e){console.log(r.user.username),"object"==typeof e.data?a.post("/api/worldFactbook",{languageOption:!0,language:e.data.question1}).then(function(t){console.log(e,t),i.recommendations=n.determineRecommendations(e.data,t.data),o.countries=i.recommendations}):s.path("/questionnaire")}));else{var u=[{question:"Have you been here before?",route:"login"},{question:"Would you like to sign up?",route:"signUp"},{question:"Okay, you won't be able to do much..."}];i.question=u[0].question;var l=0;i.showButtons=!0,i.getQuestion=function(e){var t=(u[l].question,u[l].route);e?s.path(t):(l++,i.question=u[l].question,l==u.length-1&&(i.showButtons=!1))}}i.setCountryPage=function(e,n){t.name=e,t.abbreviation=n,s.path("/country")}}]),app.controller("aboutController",["$scope",function(e){}]),app.controller("contactController",["$scope",function(e){e.message="I'm a page that tells you how to yell (by writing an all-caps email) at the developer!"}]),app.controller("signUpController",["$location","$scope","$http",function(e,t,n){t.register=function(){var o={username:t.form.userName,email:t.form.email,password:t.form.password,lastName:t.form.lastName,firstName:t.form.firstName,passwordConfirm:t.form.passwordConfirm};n.post("/api/register",o).then(function(t){console.log(t),e.path("/login")})}}]),app.controller("countryController",["countryPage","$scope","$http",function(e,t,n){t.countryName=e.name,t.abbreviation=e.abbreviation,n.get("/worldBank/worldBankData/"+t.abbreviation).then(function(e){console.log(e)})}]),app.controller("loginController",["$scope","$http","authService","$location","$rootScope",function(e,t,n,o,a){e.signIn=function(){var r={username:e.form.userName,password:e.form.password};t.post("api/login",r).then(function(e){n.saveToken(e.data),a.user=n.getUser(),o.path("/")})}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location","$http",function(e,t,n,o,a){n.user=e.getUser(),n.user&&n.user.username&&o.path("/"),t.logout=function(){a.get("/api/questionnaire/"+n.user.username),a.get("/api/logout").then(function(e){console.log(e)}),e.logout(),n.user=e.getUser(),o.path("/home")}}]),app.controller("helpController",["$scope",function(e){e.message="I'm a help page that currently doesn't help at all"}]),app.controller("questionnaireController",["countryPage","userRecommendations","questionnaire","$rootScope","$scope","$location","$http","$log","$q",function(e,t,n,o,a,r,i,s,u){function l(){return a.list.map(function(e){return{value:e.toLowerCase(),display:e}})}function c(e){var t=angular.lowercase(e);return function(e){return 0===e.value.indexOf(t)}}o.user.username||r.path("/login");var p=n.questions,h={},m={};a.questionNum=0,a.data={},a.data={},a.answers=[],a.querySearch=function(e){return e?a.list.filter(c(e)):a.list},a.pushAnswer=function(e){e&&(a.answers.push(e),a.data.showAnswers=!0)},i.get("/api/questionnaire/"+o.user.username).then(function(e){console.log(o.user.username),"object"==typeof e.data?i.post("/api/worldFactbook",{languageOption:!0,language:e.data.question1}).then(function(o){console.log(e,o),a.recommendations=n.determineRecommendations(e.data,o.data),t.countries=a.recommendations}):(a.getQuestion(),a.list=l())}),a.getQuestion=function(){a.data.showAnswers=!1,a.questionNum==p.length?(a.question="Your list is being generated!",m.username=o.user.username,m.questionResponses=h,i.post("/api/questionnaire",m),i.post("/api/worldFactbook",{languageOption:!0,language:h.question1}).then(function(e){a.recommendations=n.determineRecommendations(h,e.data),t.countries=a.recommendations,r.path("/")}),a.type=""):(a.question=p[a.questionNum].question,a.type=p[a.questionNum].type,console.log(a.question,a.type),"list"==a.type&&(a.list=p[a.questionNum].answerOptions))},a.logAnswer=function(e){a.data.showAnswers=!1,a.questionNum++,e.constructor===Array&&(e=e.join(" ")),h["question"+a.questionNum]=e,a.answers=[],a.searchText=""},a.addCountry=function(){i.post("/api/userCountries",{username:o.user.username,userCountries:["france","germany","spain"]}).then(function(e){a.userCountries=e.userCountries})},a.setCountryPage=function(t){e.name=t},a.deleteQuestionnaire=function(){i["delete"]("api/questionnaire/"+o.user.username).then(function(e){console.log("deleted!"),t={},a.recommendations=!1,a.questionNum=0,a.getQuestion(),a.list=l()})}}]),app.service("authService",["$window",function(e){this.parseJwt=function(t){if(t){var n=t.split(".")[1],o=n.replace("-","+").replace("_","/");return JSON.parse(e.atob(o))}return{}},this.saveToken=function(t){e.localStorage.jwtToken=t,console.log("Saved token:",e.localStorage.jwtToken)},this.getToken=function(){return e.localStorage.jwtToken},this.isAuthed=function(){var e=this.getToken();if(e){var t=this.parseJwt(e),n=Math.round((new Date).getTime()/1e3)<=t.exp;return n||this.logout(),n}return!1},this.logout=function(){delete e.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.factory("authInterceptor",["$q","$location","authService",function(e,t,n){return{request:function(e){return e.headers=e.headers||{},console.log(e.url),n.isAuthed()&&(e.headers.Authorization="Bearer "+n.getToken()),e},response:function(o){return t.search().access_token&&(n.saveToken(t.search().access_token),t.search("access_token",void 0),t.path("/")),401===o.status&&t.path("/login"),o||e.when(o)},responseError:function(n){return 401===n.status?t.path("/login"):console.log(n),e.reject(n)}}}]),app.factory("questionnaire",function(){return{questions:[{question:"What language(s) do you speak?",type:"list",answerOptions:["Adyghe","Albanian","Aragonese","Armenian","Aromanian","Arpitan","Asturian","Avar","Azerbaijani","Bashkir","Basque","Belarusian","Bosnian","Breton","Bulgarian","Catalan","Chechen","Chuvash","Cornish","Corsican","Crimean","Croatian","Czech","Danish","Dutch","English","Erzya","Estonian","Faroese","Finnish","French","Frisian","Gagauz","Galician","Gallo","Georgian","German","Greek","Hungarian","Icelandic","Ingrian","Irish","Italian","Kabardian","Kashubian","Kazakh","Ladin","Latin","Latvian","Laz","Lithuanian","Luxembourgish","Macedonian","Maltese","Manx","Mari","Mingrelian","Mirandese","Montenegrin","Norwegian","Occitan","Ossetian","Picard","Polish","Portuguese","Romani","Romanian","Romansh","Russian","Sami","Sardinian","Scots","Scottish","Gaelic","Serbian","Silesian","Slovak","Slovene","Sorbian","Spanish","Svan","Swedish","Tabasaran","Tatar","Turkish","Ukrainian","Vepsian","VÃµro","Walloon","Welsh","Wymysorys"]},{question:"What field do you work in?",type:"list",answerOptions:["Agriculture","Industry","Services"]},{question:"What climate(s) would you prefer?",type:"list",answerOptions:["Temperate","Mediterranean","Tropical","Arid","Desert","Maritime","Wet"]},{question:"What is the ideal size for the largest metropolitan area?",type:"list",answerOptions:["Small (<100,000)","Medium (100,000-1 million)","Large (>1 million)"]},{question:"Would you like the population distribution to be mostly urban?",type:"boolean"},{question:"What would your ideal median age range be?",type:"list",answerOptions:["20-30yrs","30-40yrs","40+years"]},{question:"What cost of living should your destination have?",type:"list",answerOptions:["High","Average","Low"]},{question:"What percentage of the population should be internet users?",type:"list",answerOptions:["<25%","25%-50%","50%-75%",">75%"]}],determineRecommendations:function(e,t){function n(e,t,n){if(n>=e&&t>=n)return 10;var o=Math.abs(n-e)>Math.abs(n-t)?t:e,a=n>o?.5:1.5,r=20*(1-Math.min(1,Math.abs(n-a*o)/o));return r}return countries=[],t.forEach(function(t,o){var a,r,i,s=0,u=t.labor[e.question2]||0,l=u/7.5>10?10:u/10;i="array"==typeof e.question3?new RegExp(e.question3.join("|"),"i"):new RegExp(e.question3,"i");var c=null!=t.climate.match(i)?10:0,p=e.question4;switch(p){case"Small (<100,000)":r=0,a=1e5;break;case"Medium (100,000-1 million)":r=1e5,a=1e6;break;case"Large (>1 million)":r=1e6,a=1e20}var h,m=n(r,a,t.largestCityPop)||0,g=e.question5;h=g?t.urbanPopulation>50?10:10*t.urbanPopulation/50:t.urbanPopulation<50?10:500/t.urbanPopulation;var d=e.question6;switch(d){case"20-30yrs":r=0,a=30;break;case"30-40yrs":r=30,a=40;break;case"40+years":r=40,a=150}var f=n(r,a,t.medianAge),w=e.question7;switch(w){case"High":r=6e4,a=1e10;break;case"Average":r=3e4,a=6e4;break;case"Low":r=0,a=3e4}var y=n(r,a,t.perCapitaPPP),q=e.question8;switch(q){case"<25%":r=0,a=25;break;case"25%-50%":r=25,a=50;break;case"50%-75%":r=50,a=75;break;default:r=75,a=100}var v=n(r,a,t.internetUsagePerCapita);s=s+l+c+m+h+y+f+v,t.score=s,countries.push(t)}),countries.sort(function(e,t){return e.score>t.score?-1:e.score<t.score?1:e.countryName>t.countryName?1:e.countryName<t.countryName?-1:0}),countries.slice(0,4)}}}),app.factory("countryPage",function(){return{}}),app.factory("userRecommendations",function(){return{}});
//# sourceMappingURL=data:application/json;base64,